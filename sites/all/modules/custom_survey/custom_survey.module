<?php
// $Id: custom_survey.module,v 1.1 2010/11/02 17:40:52 rabith Exp $

/**
 * @file
 * custom_survey.module file to handle Survey functionality along with webform
 */
 ?>
<?php
/**
 * Implementation of hook_init().
 */
  function custom_survey_init() {
  global $language,$base_url;
  $ln  = $language->language;

  if(module_exists('itrinno_eucookie_compliance')) {
    $cookie_variable = 'eu_cookie_settings_' . $ln;
    $get_settings_values = variable_get($cookie_variable,'');
    $site_impact_level =  $get_settings_values['site_impact_level'];

    if(isset($_COOKIE['cookie-compliance-user-response']) && ($site_impact_level == 2)){
     drupal_add_js(drupal_get_path('module', 'custom_survey') . '/js/survey.js');
     }
     elseif (!isset($_COOKIE['cookie-compliance-user-response']) && ($site_impact_level == 2)){
     //Do not load anything 

     }else {
     drupal_add_js(drupal_get_path('module', 'custom_survey') . '/js/survey.js');
     }
  }
  else {
    drupal_add_js(drupal_get_path('module', 'custom_survey') . '/js/survey.js');
  }
		
  }

/**
 * Implementation of hook_perm().
 */
  function custom_survey_perm() {
    return array('access webform','administer webform');
  }

/**
 * Implementation of hook_menu().
 */
  function custom_survey_menu() {

   $items['surveydeactivate'] = array(
	'title' => t('survey deactivate'),
	'page callback'=> 'survey_deactivate',
	'access callback' => 'user_access',
	'access arguments' => array('administer webform'),
	'type'=> MENU_CALLBACK,
  );
 /* $items['surveyform'] = array(
    'title' => 'Survey ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('homepage_surveyform'),
    'access callback' => 'user_access',
    'access arguments' => array('access webform'),
    'type' => MENU_CALLBACK,
  );*/
  /*
  $items['user-survey'] = array(
    'title' => t('Current Survey '),
    'page callback' => 'user_surveyform',
    'access callback' => 'user_access',
    'access arguments' => array('access webform'),
    'type' => MENU_CALLBACK,
  );
*/
   $items['survey-confirm'] = array(
    //'title' => 'Survey confirmation ',
    'page callback' => '_survey_confirmation_goto',
    'access callback' => 'user_access',
    'access arguments' => array('access webform'),
    'type' => MENU_CALLBACK,
    'menu_name' => 'menu-header-left-links',
  );
  /*
  $max_sid = db_result(db_query("SELECT max(sid) FROM webform_submissions"));
  $nid = db_result(db_query("SELECT nid FROM {webform_submissions}  where sid= %d",$max_sid));

   $items['survey-result/nid/'.$nid] = array(
    'title' => t('Results'),
    'page callback' => '_survey_confirmation',
    'access callback' => 'user_access',
    'access arguments' => array('access webform'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'menu-header-left-links',
  );
*/
  /*Added by Gopal on 24-Nov-2010 to fix the bug of view results of archive survey*/
  /*
  	$items['survey-result/nid'] = array(
		    'title' => t('Results'),
		    'page callback' => '_survey_confirmation',
		    'access callback' => 'user_access',
		    'access arguments' => array('access webform'),
		    'type' =>  MENU_NORMAL_ITEM,
		    'menu_name' => 'menu-header-left-links',
	 );
*/
   //	}

/*
   $items['survey-confirm/sid'] = array(
    'title' => t('Survey results2'),
    'page callback' => '_survey_confirmation',
    'access callback' => 'user_access',
    'access arguments' => array('access webform'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'menu-header-left-links',
  );
 $items['homesurvey'] = array(
	'title' => t('survey submit'),
	'page callback'=> 'surveyformAjaxSubmit',
	'access callback' => 'user_access',
	'access arguments' => array('access webform'),
	'type'=> MENU_CALLBACK,
  );
  */
   return $items;
  }

/*function _survey_confirmation_goto(){
	drupal_goto('survey-confirm/sid/'.$_GET['sid']);
}*/

function _survey_confirmation_goto(){
    $url = base_path();
	setcookie ("usersurveysuccess", "1", time()+3600,'/'); // for success message
	setcookie('usersurvey', '1', time()+(3600*24));// You have already submitted this form check
	header ("Location: ".$url."");
}
/**
 * Implementation of hook_theme().
 */
function custom_survey_theme() {
  $theme = array(
    'survey_confirmation' => array(
     'arguments' => array ('survey_title'=>NULL,'survey_created' => NULL,'entrants' => NULL,'qstn_array' => NULL),
      'template' => 'survey-confirmation',
    ),

  );
   return $theme;
}

/**
 * Implementation of hook_form_alter().
 */
  function custom_survey_form_alter(&$form, $form_state, $form_id) {


  //webform_node_form
  if(db_table_exists('content_type_webform')){
  $nid = db_result(db_query("select  nid from {content_type_webform} where field_active_value = 1"));
  if ($form['form_id']['#value'] == 'webform_client_form_'.$nid  || $form['form_id']['#value'] == 'webform_node_form'){
  //drupal_add_js(drupal_get_path('module', 'custom_survey') . '/js/survey.js');
   if(arg(0)== 'node'){
	  unset($form['revision_information']);
	  unset($form['comment_settings']);
	  unset($form['attachments']);
	  unset($form['menu']);
	  unset($form['nodewords']);
	  //unset($form['author']);
	  unset($form['options']);
	  unset($form['buttons']['preview']);
 if(!drupal_is_front_page()){
	  $form['#attributes'] =array('onsubmit' => 'return webform_validate();');
 }
	  $form['#validate'][] = 'web_form_customvalidate';
	  $form['#submit'][] = 'web_form_customsubmit';

	  $_SESSION['survey_first_qstn'] = '';
   }
  }
  }
  if($form['form_id']['#value'] == 'webform_client_form_'.$nid){
   $form['#node']->webform['redirect_url'] = 'survey-confirm';
   //$form['#action'] = 'user-survey';
    $form['#action'] = base_path();


  }//if(arg(0) == 'user-survey'){
  	if(drupal_is_front_page()){
  if ($form['form_id']['#value'] == 'webform_client_form_'.$nid  || $form['form_id']['#value'] == 'webform_node_form'){
  	 $form['#validate'] = array('usersurvey_form_validate');
  	 $form['#submit'][] = 'usersurvey_form_submit';
  	  $firstQstn = explode('~*~*~',$_SESSION['survey_first_qstn']);
	  $form['submitted'][$firstQstn[0]] ['#default_value'] =$firstQstn[1];
	  //print '<pre>';print_r($form); print '<pre>';
   }
  }
  //print '<pre>';print_r($form); print '<pre>';
  }


  function usersurvey_form_submit($form, &$form_state) {
   setcookie('usersurvey', '1', time()+(3600*24));
     }


/*
 * @function:web_form_customvalidate()
 * For making new/old survey to be active , expiry date should be greater then or equal to current date
 */
  function web_form_customvalidate($form, &$form_state) {
  // print '<pre>'; print_r($form_state); print '<pre>'; exit;
   //compare current date with expiry date
  if($form_state['clicked_button']['#post']['field_active']['value'] == '1'){ //If this survey is active
	  $exp_date = $form_state['clicked_button']['#post']['field_expiry_date']['0']['value']['date']; //"2006-01-16";
	  $todays_date = date("Y-m-d");
	  $today = strtotime($todays_date);
	  $expiration_date = strtotime($exp_date);
	  if ($expiration_date < $today) {
	    form_error($form['field_expiry_date'], 'Expiry Date should be greater then or equal to current date');
	   }
	 }
  }

 /*
  *@function : web_form_customsubmit()
  * If the survey is active , deactivating all other survey
  */
  function web_form_customsubmit() {
  	if($form_state['clicked_button']['#post']['field_active']['value'] == '1'){ //If this survey is active
  	  db_query("update {content_type_webform} set field_active_value = 0");
  	}
  }
/*
 *@function: survey_deactivate()
 *Deactivate all survey,through ajax
 */
  function survey_deactivate(){
   db_query("update {content_type_webform} set field_active_value = 0");
  	echo '1';exit;
  }
/*
 * Home page survey question :First question from active survey
 */
  function homepage_surveyform() {

  $nid = db_result(db_query("select  nid from {content_type_webform} where field_active_value = 1"));
  if($nid != ''){
  $cid = db_result(db_query("select cid from {webform_component} where nid = %d order by weight ASC limit 1",$nid));

  $node = node_load($nid);
  $submission =null;
  $is_draft = null;
  $filter =null;
  $form_state['webform']['component_tree'] = array();
  $form_state['webform']['page_count'] = 1;
  $form_state['webform']['page_num'] = 1;

  // Shorten up our variable names.
  $component_tree = $form_state['webform']['component_tree'];
  $page_count = $form_state['webform']['page_count'];
  $page_num = $form_state['webform']['page_num'];

  module_load_include('inc', 'webform', 'includes/webform.components');

  // Bind arguments to $form to make them available in theming and form_alter.
  $form['#node'] = $node;
  $form['#submission'] = $submission;
  $form['#is_draft'] = $is_draft;
  $form['#filter'] = $filter;
  $form['submitted'] = array(
      '#tree' => TRUE
  );
    $form['#attributes'] = array(
      'onsubmit' => 'return HomeSurveyValidate();'
  );
  //$form['#redirect'] = 'user-survey';

  $component = $node->webform['components'][$cid];



 _webform_client_form_add_component($node, $component, '', $form['submitted'], $form, $form_state, '', 'form', $page_num, '');


  //_webform_client_form_add_component($node, $component, '', $form['submitted'], $form, $form_state, '', 'form', $page_num, '');

  $form['submit'] = array(
  '#type' => 'submit',
   '#value' => t('Submit'),
  );
  }
  return $form;
  }
/**
 * Validate handler for validating the form fields
 */
  function homepage_surveyform_validate($form, &$form_state) {
	if($_COOKIE['usersurvey'] == '1') {
	  $message = t('You have already submitted this form .');
	   form_set_error('', $message);
	    return;
	}

    _webform_client_form_validate($form, $form_state);
  }

/**
 * Submit handler for saving the form values
 */
  function homepage_surveyform_submit($form, &$form_state) {
  $submitted_array = $form_state['clicked_button']['#post']['submitted'];
	  if(count($submitted_array) == '1'){
	  $arr_key = array_keys($submitted_array);
	  $arr_value = $submitted_array[$arr_key['0']];
	  $_SESSION['survey_first_qstn'] = '';
      $_SESSION['survey_first_qstn'] = $arr_key['0'].'~*~*~'.$arr_value;
	  }
	  drupal_goto('user-survey');
  }

  /**
 * Submit handler for saving the form values
 */
  function surveyformAjaxSubmit() {
  	if($_COOKIE['usersurvey'] == '1') {
       echo '0';exit;
  	}else{
  		    $_SESSION['survey_first_qstn'] = $_POST['first_qstnAns'];
    echo '1';exit;
  	}
  }
/**
 * Prints the confirmation message after a successful submission.
 */
  function _survey_confirmation(){
  	//after successful survey
    $max_sid = db_result(db_query("SELECT max(sid) FROM webform_submissions"));
  	if(arg(1) == 'sid'  && arg(2) == $max_sid ){
     drupal_set_title('Thank you for submitting your<br /> views, here are the results so far');
     $nid = db_result(db_query("SELECT nid FROM {webform_submissions}  where sid= %d",arg(2)));
  	}elseif(arg(1) == 'nid' && is_numeric(arg(2))){//survey results
  	 drupal_set_title('Survey results');
  	  //$nid = $_GET['nid'];
  	  $nid = $nid = arg(2);
  	}else{ //echo 'aaaa'.arg(1);exit;
  		//drupal_goto(base_path());
  	}

  $node = node_load($nid);
  $count =  db_result(db_query("SELECT count(*) FROM {webform_submissions} where nid=%d group by nid",$node->nid));
   if (empty($output)) {
    $output = theme('survey_confirmation',$node->title,$node->created,$count ,$node->webform['components']);
    }
  return $output;
  }
/*
 *@function: user_surveyform()
 *Displaying the survey form
 */
  function user_surveyform(){
  //$_SESSION['user_survey_error'] = '';
   //drupal_set_title('Current survey');
  $nid = db_result(db_query("select  nid from {content_type_webform} where field_active_value = 1"));
  $node = node_load($nid);
  $submission = null ;
  $is_draft = null;
  module_load_include('inc', 'webform', 'includes/webform.components');
  $form = drupal_get_form('webform_client_form_' . $node->nid , $node, $submission, $is_draft);
  return $form;
}
/*
 *@function: user_surveyform1()
 *Displaying the survey form
 */
  function user_surveyform1(){
  //$_SESSION['user_survey_error'] = '';
   //drupal_set_title('Current survey');
  $nid = db_result(db_query("select  nid from {content_type_webform} where nid = 381"));
  $node = node_load($nid);
  $submission = null ;
  $is_draft = null;
  module_load_include('inc', 'webform', 'includes/webform.components');
  $form = drupal_get_form('webform_client_form_' . $node->nid , $node, $submission, $is_draft);
  return $form;
}
/*
 *@function: user_surveyform1()
 *Displaying the survey form
 */
  function user_surveyform2(){
  //$_SESSION['user_survey_error'] = '';
   //drupal_set_title('Current survey');
  $nid = db_result(db_query("select  nid from {content_type_webform} where nid = 382"));
  $node = node_load($nid);
  $submission = null ;
  $is_draft = null;
  module_load_include('inc', 'webform', 'includes/webform.components');
  $form = drupal_get_form('webform_client_form_' . $node->nid , $node, $submission, $is_draft);
  return $form;
}/*
 *@function: user_surveyform1()
 *Displaying the survey form
 */
  function user_surveyform3(){
  //$_SESSION['user_survey_error'] = '';
   //drupal_set_title('Current survey');
  $nid = db_result(db_query("select  nid from {content_type_webform} where nid = 383"));
  $node = node_load($nid);
  $submission = null ;
  $is_draft = null;
  module_load_include('inc', 'webform', 'includes/webform.components');
  $form = drupal_get_form('webform_client_form_' . $node->nid , $node, $submission, $is_draft);
  return $form;
}
/*
 *@function: user_surveyform1()
 *Displaying the survey form
 */
  function user_surveyform4(){
  //$_SESSION['user_survey_error'] = '';
   //drupal_set_title('Current survey');
  $nid = db_result(db_query("select  nid from {content_type_webform} where nid = 384"));
  $node = node_load($nid);
  $submission = null ;
  $is_draft = null;
  module_load_include('inc', 'webform', 'includes/webform.components');
  $form = drupal_get_form('webform_client_form_' . $node->nid , $node, $submission, $is_draft);
  return $form;
}
function user_surveyform_block() {
  $nid = db_result(db_query("select  nid from {content_type_webform} where field_active_value = 1"));
  $node = node_load($nid);
  $submission = null ;
  $is_draft = null;
  module_load_include('inc', 'webform', 'includes/webform.components');
  //$form = drupal_get_form('webform_client_form_' . $node->nid , $node, $submission, $is_draft);
  return array('subject' => 'User Survey Form', 'content' => user_surveyform());
}

function usersurvey_form_validate($form, &$form_state) {
 /* $node = node_load($form_state['values']['details']['nid']);
  $finished = $form_state['values']['details']['finished'];

  // Check that the user has not exceeded the submission limit.
  // This usually will only apply to anonymous users when the page cache is
  // enabled, because they may submit the form even if they do not have access.
  if ($node->webform['submit_limit'] != -1) { // -1: Submissions are never throttled.
    module_load_include('inc', 'webform', 'includes/webform.submissions');

    if (!$finished && $limit_exceeded = _webform_submission_limit_check($node)) {
   $error = theme('webform_view_messages', $node, 0, 1, 0, $limit_exceeded, array_keys(user_roles()));
      form_set_error('', $error);
      return;
    }
  }
*/

if($_COOKIE['usersurvey'] == '1') {

  $message = t('You have already submitted this form .');
   form_set_error('form_resubmit', $message);
    return;
}

   // Run all #element_validate and #required checks. These are skipped initially
  // by setting #validated = TRUE on all components when they are added.
  _usersurveyform_validate($form, $form_state);
}
/**
 * Recursive validation function to trigger normal Drupal validation.
 *
 * This function imitates _form_validate in Drupal's form.inc, only it sets
 * a different property to ensure that validation has occurred.
 */
function _usersurveyform_validate($elements, &$form_state, $first_run = TRUE) {
  static $form;
  $usersurvey_error = 0;
   if ($first_run) {
    $form = $elements;
  }

  // Recurse through all children.
  foreach (element_children($elements) as $key) {
    if (isset($elements[$key]) && $elements[$key]) {
      _usersurveyform_validate($elements[$key], $form_state, FALSE);
    }
  }
  // Validate the current input.
  if (isset($elements['#webform_validated']) && $elements['#webform_validated'] == FALSE) {
    if (isset($elements['#needs_validation'])) {
      // Make sure a value is passed when the field is required.
      // A simple call to empty() will not cut it here as some fields, like
      // checkboxes, can return a valid value of '0'. Instead, check the
      // length if it's a string, and the item count if it's an array.
      if ($elements['#required'] && (!count($elements['#value']) || (is_string($elements['#value']) && strlen(trim($elements['#value'])) == 0))) {
       $usersurvey_error = $usersurvey_error +1;
       $_SESSION['user_survey_error'] = 'error';
        form_error($elements);

      }

      // Verify that the value is not longer than #maxlength.
      if (isset($elements['#maxlength']) && drupal_strlen($elements['#value']) > $elements['#maxlength']) {
        form_error($elements, t('!name cannot be longer than %max characters but is currently %length characters long.', array('!name' => empty($elements['#title']) ? $elements['#parents'][0] : $elements['#title'], '%max' => $elements['#maxlength'], '%length' => drupal_strlen($elements['#value']))));
      }

      if (isset($elements['#options']) && isset($elements['#value'])) {
        if ($elements['#type'] == 'select') {
          $options = form_options_flatten($elements['#options']);
        }
        else {
          $options = $elements['#options'];
        }
        if (is_array($elements['#value'])) {
          $value = $elements['#type'] == 'checkboxes' ? array_keys(array_filter($elements['#value'])) : $elements['#value'];
          foreach ($value as $v) {
            if (!isset($options[$v])) {
              form_error($elements, t('An illegal choice has been detected. Please contact the site administrator.'));
              watchdog('form', 'Illegal choice %choice in !name element.', array('%choice' => $v, '!name' => empty($elements['#title']) ? $elements['#parents'][0] : $elements['#title']), WATCHDOG_ERROR);
            }
          }
        }
        elseif ($elements['#value'] !== '' && !isset($options[$elements['#value']])) {
          form_error($elements, t('An illegal choice has been detected. Please contact the site administrator.'));
          watchdog('form', 'Illegal choice %choice in %name element.', array('%choice' => $elements['#value'], '%name' => empty($elements['#title']) ? $elements['#parents'][0] : $elements['#title']), WATCHDOG_ERROR);
        }
      }
    }

    // Call any element-specific validators. These must act on the element
    // #value data.
    if (isset($elements['#element_validate'])) {
      foreach ($elements['#element_validate'] as $function) {
        if (function_exists($function))  {
          $function($elements, $form_state, $form);
        }
      }
    }
    $elements['#webform_validated'] = TRUE;
  }
}

/**
 * Implementation of hook_block().
 */
function custom_survey_block($op = 'list', $delta = 0, $edit = array()) {
  global $user;

  if ($op == 'list') {
    $blocks['200']['info'] = t('User Survey Form');
    // Not worth caching.
    $blocks['200']['cache'] = BLOCK_NO_CACHE;
     $blocks['200']['region'] = 'hsurvey_right';
     $blocks['200']['status'] = 1;

     return $blocks;
  }
  else if ($op == 'view') {
    $block = array();

    switch ($delta) {
      case 200:
          $block = user_surveyform_block();
        return $block;
    }
  }
}