<?php
// $Id: jnj_siteexit.module,v 1.3 2008/08/27 00:33:21 Exp $

function jnj_siteexit_menu() {
	$items = array();
	$items['admin/settings/jnj_siteexit'] = array(
		'title' => t('Exit Site'),
		'description' => t('Configure the Exit Site functionality.'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('extlink_admin_settings_form'),
		'access callback' => 'user_access',
		'access arguments' => array('administer site configuration'),
	);

	$items['extlink'] = array(
		'title' => t('Exiting J&J website..'),
		'description' => t('Decide whether to navigate to the external page.'),
		'page callback' => extlink_dhtml_items,
		'access arguments' => array('access content'),
		'type' => MENU_LOCAL_TASK,
	);
	
	$items['extlink/path'] = array(
		'title' => t('Navigating to the selected URL'),
		'description' => t('Navigating to the selected URL.'),
		'page callback' => extlink_navigation,
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	return $items;
}

/**
 * Implementation of hook_init().
 */
function jnj_siteexit_init() {
	global $base_root, $base_url;
	$path = drupal_get_path('module', 'jnj_siteexit');
	drupal_add_js($path .'/extlink.js');
	drupal_add_css(drupal_get_path('module', 'jnj_siteexit') .'/css/dhtmlwindow.css');
	drupal_add_js(dhtml_js(),'inline');
	drupal_add_css(drupal_get_path('module', 'jnj_siteexit') .'/css/modal.css');
	drupal_add_js(drupal_get_path('module', 'jnj_siteexit') .'/js/modal.js');
	drupal_add_js(drupal_get_path('module', 'jnj_siteexit') .'/js/extlink_window.js');
	drupal_add_js(array('extlink' => array(
		'extTarget_Msg' => strip_tags(html_entity_decode(t(variable_get('exit_disclaimer_message', NULL)))),
		'extTarget' => variable_get('extlink_window', ''),
		'externalLink' => $_REQUEST['url'],
		'extWhiteList' => variable_get('extlink_white_list', ''),
		'extAdditionalList' => variable_get('extlink_additional_list', ''),
		'extDhtmlWidth' => variable_get('extlink_dhtml_width', '500'),
		'extDhtmlHeight' => variable_get('extlink_dhtml_height', '240'),
		'extDhtmlTitle' => variable_get('extlink_dhtml_title', t('External Link Page')),
		'extHoverBackgroundimage' => $base_url.'/'.variable_get('extlink_prompt_type_hover_backgroundimage', ''),
		'extHoverBackgroundwidth' => variable_get('extlink_prompt_type_hover_backgroundwidth', ''),
		'extHoverBackgroundcolor' => variable_get('extlink_prompt_type_hover_backgroundcolor', ''),
		'extHoverBackgroundheight' => variable_get('extlink_prompt_type_hover_backgroundheight', ''),
		'extHoverTimeout' => variable_get('extlink_prompt_type_hover_timeout', 6),
		'extClass' => variable_get('extlink_class', 'ext'), 
		'noExtClass' => variable_get('no_extlink_class', 'no-ext'), 
		'extSubdomains' => variable_get('extlink_subdomains', 1),
	
		'extPromptType' => variable_get('extlink_prompt_type', 0),
		'extPromptTypeTemp' => $_REQUEST['extlink_prompt_type'],
	
		'extPromptDhtml' => variable_get('extlink_prompt_type_dhtml', ''),
		'extPromptDhtmlTemp' => $_REQUEST['extlink_prompt_type_dhtml'],
	
		'extPromptWeb' => variable_get('extlink_prompt_type_web', ''),
		'extPromptWebTemp' => $_REQUEST['extlink_prompt_type_web'],
	
		'extPromptNewwindow' => variable_get('extlink_prompt_type_newwindow', ''),
		'extPromptNewwindowTemp' => $_REQUEST['extlink_prompt_type_newwindow'],
	
		'extPromptHover' => variable_get('extlink_prompt_type_hover', ''),
		'extPromptHoverTemp' => $_REQUEST['extlink_prompt_type_hover'],
	
		'mailtoClass' => variable_get('extlink_mailto_class', 'mailto'),
		'path' => $base_root . base_path() . '?q=extlink',
		'basePath' => base_path(),
	)), 'setting');
	if (variable_get('extlink_class', 'ext') == 'ext' || variable_get('extlink_mailto_class', 'mailto') == 'mailto') {
		drupal_add_css($path .'/extlink.css');
	}
}

/**
 * Implementation of hook_perm
*/ 
function jnj_siteexit_perm() {
	return array('access exit disclaimer');
}

/**
 * Implementation of hook_theme
 */
function jnj_siteexit_theme() {
	return array(
		'exit_disclaimer_message' => array(
			'arguments' => array('message' => NULL, 'buttons' => NULL),
			'template' => 'exit-disclaimer',
		),
	);
}

/**
 * Administrator settings form to display the system prompt.
 */
function extlink_admin_settings_form() {
	global $base_url;
	$form = array();
	$form['exit_disclaimer_message'] = array(
		'#type' => 'textarea',
		'#title' => t('Exit Disclaimer Message'),
		'#default_value' => variable_get('exit_disclaimer_message', NULL),
	);

	$form['extlink_prompt_formats'] = array(
		'#type' => 'fieldset',
		'#title' => t('System Prompt Type'),
	);
	$form['extlink_prompt_formats']['extlink_prompt_type'] = array(
		'#type' => 'radios',
		'#title' => t('Choose the type of system prompt for the Exit Site event'),
		'#options' => array('0' => t('JavaScript Popup'), '1' => t('DHTML Popup'), '2' => t('Normal Webpage'), '3' => t('New Window'), '4' => t('Tooltip on mouseover')),
		'#default_value' => variable_get('extlink_prompt_type', 0),
		'#return_value' => variable_get('extlink_prompt_type', 0),
		'#description' => t('Choose the type of system prompt to be used to display the warning message when the end user clicks on an external link to invoke the exit site event.'),
	);

	$form['extlink_prompt_format_types'] = array(
		'#type' => 'fieldset',
		'#prefix' => '<div id="extlink-prompt-formats">',
		'#suffix' => '</div>',
		'#title' => t('System Prompt Button Type'),
	);
	$form['extlink_prompt_format_types']['extlink_prompt_type_dhtml'] = array(
		'#prefix' => '<div id="extlink-prompt-dhtml">',
		'#suffix' => '</div>',
		'#type' => 'radios',
		'#title' => t('Button Type for DHTML'),
		'#options' => array('dhtml_button' => t('HTML Button'), 'dhtml_image' => t('Image Button')),
		'#default_value' => variable_get('extlink_prompt_type_dhtml', 'dhtml_button'),
		'#return_value' => variable_get('extlink_prompt_type_dhtml', ''),
		'#description' => t('Choose the button types to be shown in the warning message for the Continue and Return buttons.'),
	);

	$form['extlink_prompt_format_types']['extlink_prompt_type_web'] = array(
		'#prefix' => '<div id="extlink-prompt-web">',
		'#suffix' => '</div>',
		'#type' => 'radios',
		'#title' => t('Button Type for Normal Webpage'),
		'#options' => array('web_button' => t('HTML Button'), 'web_image' => t('Image Button')),
		'#default_value' => variable_get('extlink_prompt_type_web', 'web_button'),
		'#return_value' => variable_get('extlink_prompt_type_web', ''),
		'#description' => t('Choose the button types to be shown in the warning message for the Continue and Return buttons.'),
	);
	
	$form['extlink_prompt_format_types']['extlink_prompt_type_newwindow'] = array(
		'#prefix' => '<div id="extlink-prompt-newwindow">',
		'#suffix' => '</div>',
		'#type' => 'radios',
		'#title' => t('Button Type for New Window'),
		'#options' => array('newwindow_button' => t('HTML Button'), 'newwindow_image' => t('Image Button')),
		'#default_value' => variable_get('extlink_prompt_type_newwindow', 'newwindow_button'),
		'#return_value' => variable_get('extlink_prompt_type_newwindow', ''),
		'#description' => t('Choose the button types to be shown in the warning message for the Continue and Return buttons.'),
	);
	$form['extlink_prompt_format_types']['extlink_prompt_type_hover'] = array(
		'#prefix' => '<div id="extlink-prompt-hover">',
		'#type' => 'radios',
		'#title' => t('Button Type on mouseover'),
		'#options' => array('hover_button' => t('HTML Button'), 'hover_image' => t('Image Button')),
		'#default_value' => variable_get('extlink_prompt_type_hover', 'hover_button'),
		'#return_value' => variable_get('extlink_prompt_type_hover', ''),
		'#description' => t('Choose the button types to be shown in the warning message for the Continue and Return buttons.'),
	);
	$form['extlink_prompt_format_types']['extlink_prompt_type_hover_backgroundimage'] = array(
		'#type' => 'textfield',
		'#field_prefix' => $base_url."/",
		'#title' => t('Background Image'),
		'#default_value' => variable_get('extlink_prompt_type_hover_backgroundimage', 'sites/all/modules/jnj_siteexit/images/share-bg.png'),
		'#required' => TRUE,
		'#description' => t('Path should be like images/continueButtonImg.jpg'),
	);
	$form['extlink_prompt_format_types']['extlink_prompt_type_hover_timeout'] = array(
		'#type' => 'textfield',
		'#field_suffix' => 'seconds',
		'#title' => t('Automatic Timeout'),
		'#default_value' => variable_get('extlink_prompt_type_hover_timeout', 6),
		'#required' => TRUE,
		'#size' => '20',
		'#description' => t('Automatic timeout for mouseover popup in seconds'),
	);
	$form['extlink_prompt_format_types']['extlink_prompt_type_hover_backgroundcolor'] = array(
		'#type' => 'textfield',
		'#field_prefix' => '#',
		'#title' => t('Background Color'),
		'#default_value' => variable_get('extlink_prompt_type_hover_backgroundcolor', 'FF0000'),
		'#required' => TRUE,
		'#size' => '20',
		'#maxlength' => 6,
	);
	$form['extlink_prompt_format_types']['extlink_prompt_type_hover_backgroundwidth'] = array(
		
		'#type' => 'textfield',
		'#field_suffix' => 'px',
		'#title' => t('Background Width'),
		'#default_value' => variable_get('extlink_prompt_type_hover_backgroundwidth', '300'),
		'#required' => TRUE,
		'#size' => '20',
	);
	$form['extlink_prompt_format_types']['extlink_prompt_type_hover_backgroundheight'] = array(
		'#suffix' => '</div>',
		'#type' => 'textfield',
		'#field_suffix' => 'px',
		'#title' => t('Background Height'),
		'#default_value' => variable_get('extlink_prompt_type_hover_backgroundheight', '200'),
		'#required' => TRUE,
		'#size' => '20',
	);
	
	$form['extlink_prompt_format_types']['extlink_dhtml_width'] = array(
		'#prefix' => '<div id="extlink-dhtml-width">',
		'#suffix' => '</div>',
		'#type' => 'textfield',
		'#field_suffix' => 'px',
		'#size' => '20',
		'#title' => t('Width of DHTML popup window'),
		'#default_value' => variable_get('extlink_dhtml_width', '500'),
		'#required' => TRUE,
	);
	$form['extlink_prompt_format_types']['extlink_dhtml_height'] = array(
		'#prefix' => '<div id="extlink-dhtml-height">',
		'#suffix' => '</div>',
		'#type' => 'textfield',
		'#field_suffix' => 'px',
		'#size' => '20',
		'#title' => t('Height of DHTML popup window'),
		'#default_value' => variable_get('extlink_dhtml_height', '240'),
		'#required' => TRUE,
		'#description' => t('If this field is left blank, the popup takes 240px as default.'),
	);
	$form['extlink_prompt_format_types']['extlink_dhtml_title'] = array(
		'#prefix' => '<div id="extlink-dhtml-title">',
		'#suffix' => '</div>',
		'#type' => 'textfield',
		'#title' => t('Title of DHTML popup window'),
		'#default_value' => variable_get('extlink_dhtml_title', t('External Link Page')),
		'#required' => TRUE,
	);
	
	$form['extlink_prompt_format_buttons'] = array(
		'#type' => 'fieldset',
		'#prefix' => '<div id="extlink-prompt-buttons">',
		'#suffix' => '</div>',
		'#title' => t('System Prompt Buttons'),
	);
	$form['extlink_prompt_format_buttons']['extlink_dhtml_image_ok'] = array(
		'#prefix' => '<div id="extlink-dhtml-image">',
		'#type' => 'textfield',
		'#field_prefix' => $base_url."/",
		'#title' => t('Provide the path to the Continue button image'),
		'#default_value' => variable_get('extlink_dhtml_image_ok', ''),
		'#required' => TRUE,
		'#description' => t('Path should be like images/continueButtonImg.jpg'),
	);
	$form['extlink_prompt_format_buttons']['extlink_dhtml_image_cancel'] = array(
		'#suffix' => '</div>',
		'#type' => 'textfield',
		'#field_prefix' => $base_url."/",
		'#title' => t('Provide the path to the Return button image'),
		'#default_value' => variable_get('extlink_dhtml_image_cancel', ''),
		'#required' => TRUE,
		'#description' => t('Path should be like images/returnButtonImg.jpg'),
	);

	$form['extlink_prompt_format_buttons']['extlink_web_image_ok'] = array(
		'#prefix' => '<div id="extlink-web-image">',
		'#type' => 'textfield',
		'#field_prefix' => $base_url."/",
		'#title' => t('Provide the path to the Continue button image'), 
		'#default_value' => variable_get('extlink_web_image_ok', ''),
		'#required' => TRUE,
		'#description' => t('Path should be like images/continueButtonImg.jpg'),
	);
	$form['extlink_prompt_format_buttons']['extlink_web_image_cancel'] = array(
		'#suffix' => '</div>',
		'#type' => 'textfield',
		'#field_prefix' => $base_url."/",
		'#title' => t('Provide the path to Return button image'), 
		'#default_value' => variable_get('extlink_web_image_cancel', ''),
		'#required' => TRUE,
		'#description' => t('Path should be like images/returnButtonImg.jpg'),
	);
	
	$form['extlink_prompt_format_buttons']['extlink_newwindow_image_ok'] = array(
		'#prefix' => '<div id="extlink-newwindow-image">',
		'#type' => 'textfield',
		'#field_prefix' => $base_url."/",
		'#title' => t('Provide the path to the Continue button image'), 
		'#default_value' => variable_get('extlink_newwindow_image_ok', ''),
		'#required' => TRUE,
		'#description' => t('Path should be like images/continueButtonImg.jpg'),
	);
	$form['extlink_prompt_format_buttons']['extlink_newwindow_image_cancel'] = array(
		'#suffix' => '</div>',
		'#type' => 'textfield',
		'#field_prefix' => $base_url."/",
		'#title' => t('Provide the path to Return button image'), 
		'#default_value' => variable_get('extlink_newwindow_image_cancel', ''),
		'#required' => TRUE,
		'#description' => t('Path should be like images/returnButtonImg.jpg'),
	);
	
	$form['extlink_prompt_format_buttons']['extlink_hover_image_ok'] = array(
		'#prefix' => '<div id="extlink-hover-image">',
		'#type' => 'textfield',
		'#field_prefix' => $base_url."/",
		'#title' => t('Provide the path to the Continue button image'), 
		'#default_value' => variable_get('extlink_hover_image_ok', ''),
		'#required' => TRUE,
		'#description' => t('Path should be like images/continueButtonImg.jpg'),
	);
	$form['extlink_prompt_format_buttons']['extlink_hover_image_cancel'] = array(
		'#suffix' => '</div>',
		'#type' => 'textfield',
		'#field_prefix' => $base_url."/",
		'#title' => t('Provide the path to Return button image'), 
		'#default_value' => variable_get('extlink_hover_image_cancel', ''),
		'#required' => TRUE,
		'#description' => t('Path should be like images/returnButtonImg.jpg'),
	);
	
	$form['extlink_window'] = array(
		'#type' => 'checkbox',
		'#title' => t('Click to open external links in new window.'),
		'#return_value' => '_blank',
		'#default_value' => variable_get('extlink_window', 0),    
		'#description' => t('Should all external links be opened in a new window?'),
	);
	$form['extlink_class'] = array(
		'#type' => 'textfield',
		'#title' => t('Custom Configurable Class to get Site Exit Disclaimer'),
		'#default_value' => variable_get('extlink_class', 'ext'),
		'#description' => t('If we give this class to anchor tag Site Exit disclaimer will come automatically even it is internal link'),
	);
	$form['no_extlink_class'] = array(
		'#type' => 'textfield',
		'#title' => t('Custom Configurable Class to prevent from Site Exit Disclaimer'),
		'#default_value' => variable_get('no_extlink_class', 'no-ext'),
		'#description' => t('If we give this class to anchor tag Site Exit will ignore the disclaimer even it is external link'),
	);
	$form['extlink_white_list'] = array(
		'#type' => 'textarea',
		'#title' => t('Specify the Domain Names in White-list'),
		'#default_value' => variable_get('extlink_white_list', ''),    
		'#description' => t('Links pointing to these domains will be excluded from this Exit Site functionality. Please provide the URLs in the following format. <b>http://www.yoursite.com</b>, <b>http://www.yoursite2.com</b>'),
	);
	$form['extlink_additional_list'] = array(
		'#type' => 'textarea',
		'#title' => t('Specify the Domain Names in Additional-list'),
		'#default_value' => variable_get('extlink_additional_list', ''),    
		'#description' => t('Links pointing to these domains will be included to this Exit Site functionality even these are not external links. Please provide the URLs in the following format. <b>http://www.yoursite.com</b>, <b>http://www.yoursite2.com</b>'),
	);
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#id' => 'edit-extlink-submit',
		'#value' => t('Save Configuration'),
	);
	return $form;
}

function extlink_admin_settings_form_submit($form_id, &$form_state) {
	switch(variable_get('extlink_prompt_type', '')) {
		case '0':
			break;
		case '1':
			variable_del('extlink_prompt_type_dhtml');
			variable_del('extlink_dhtml_image_ok');
			variable_del('extlink_dhtml_image_cancel');
			variable_del('extlink_dhtml_width');
			variable_del('extlink_dhtml_height');
			variable_del('extlink_dhtml_title');
			break;
		case '2':
			variable_del('extlink_prompt_type_web');
			variable_del('extlink_web_image_ok');
			variable_del('extlink_web_image_cancel');
			break;
		case '3':
			variable_del('extlink_prompt_type_newwindow');
			variable_del('extlink_newwindow_image_ok');
			variable_del('extlink_newwindow_image_cancel');
			break;
		case '4':
			variable_del('extlink_prompt_type_hover');
			variable_del('extlink_hover_image_ok');
			variable_del('extlink_hover_image_cancel');
			variable_del('extlink_prompt_type_hover_backgroundimage');
			variable_del('extlink_prompt_type_hover_backgroundwidth');
			variable_del('extlink_prompt_type_hover_backgroundcolor');
			variable_del('extlink_prompt_type_hover_backgroundheight');
			variable_del('extlink_prompt_type_hover_timeout');
			break;
	}
	variable_set('extlink_prompt_type', $form_state['values']['extlink_prompt_type']);
	variable_set('extlink_white_list', $form_state['values']['extlink_white_list']);
	variable_set('extlink_additional_list', $form_state['values']['extlink_additional_list']);
	variable_set('extlink_window', $form_state['values']['extlink_window']);
	variable_set('exit_disclaimer_message', $form_state['values']['exit_disclaimer_message']);
	variable_set('extlink_class', $form_state['values']['extlink_class']);
	variable_set('no_extlink_class', $form_state['values']['no_extlink_class']);
	switch (variable_get('extlink_prompt_type', '')) {
		case '0':	//Javascript Popup
			variable_del('extlink_prompt_type_dhtml');
			variable_del('extlink_prompt_type_web');
			variable_del('extlink_prompt_type_newwindow');
			variable_del('extlink_prompt_type_hover');
			break;
		case '1':	//DHTML Popup
			$dhtml_value = $form_state['values']['extlink_prompt_type_dhtml'];
			/*$web_value = $form_state['values']['extlink_prompt_type_web'];
			$newwindow_value = $form_state['values']['extlink_prompt_type_newwindow'];
			$hover_value = $form_state['values']['extlink_prompt_type_hover'];*/
			
			$dhtml_value ? variable_set('extlink_prompt_type_dhtml', $dhtml_value) : variable_del('extlink_prompt_type_dhtml');
			/*$web_value ? variable_set('extlink_prompt_type_web', $web_value) : variable_del('extlink_prompt_type_web');
			$newwindow_value ? variable_set('extlink_prompt_type_newwindow', $newwindow_value) : variable_del('extlink_prompt_type_newwindow');
			$hover_value ? variable_set('extlink_prompt_type_hover', $hover_value) : variable_del('extlink_prompt_type_hover');*/
			
			if(variable_get('extlink_prompt_type_dhtml', '') == 'dhtml_image') {
				variable_set('extlink_dhtml_image_ok', $form_state['values']['extlink_dhtml_image_ok']);
				variable_set('extlink_dhtml_image_cancel', $form_state['values']['extlink_dhtml_image_cancel']);
			}
			variable_set('extlink_dhtml_width', $form_state['values']['extlink_dhtml_width']);
			variable_set('extlink_dhtml_height', $form_state['values']['extlink_dhtml_height']);
			variable_set('extlink_dhtml_title', $form_state['values']['extlink_dhtml_title']);
			
			/*variable_del('extlink_prompt_type_web');
			variable_del('extlink_prompt_type_newwindow');
			variable_del('extlink_prompt_type_hover');*/
			break;
		case '2':	//Normal web page
			$web_value = $form_state['values']['extlink_prompt_type_web'];
			/*$dhtml_value = $form_state['values']['extlink_prompt_type_dhtml'];
			$newwindow_value = $form_state['values']['extlink_prompt_type_newwindow'];
			$hover_value = $form_state['values']['extlink_prompt_type_hover'];*/
			
			$web_value ? variable_set('extlink_prompt_type_web', $web_value) : variable_del('extlink_prompt_type_web');
/*			$dhtml_value ? variable_set('extlink_prompt_type_dhtml', $dhtml_value) : variable_del('extlink_prompt_type_dhtml');
			$newwindow_value ? variable_set('extlink_prompt_type_newwindow', $newwindow_value) : variable_del('extlink_prompt_type_newwindow');
			$hover_value ? variable_set('extlink_prompt_type_hover', $hover_value) : variable_del('extlink_prompt_type_hover');*/
			
			if(variable_get('extlink_prompt_type_web', '') == 'web_image') {
				variable_set('extlink_web_image_ok', $form_state['values']['extlink_web_image_ok']);
				variable_set('extlink_web_image_cancel', $form_state['values']['extlink_web_image_cancel']);
			}
			
/*			variable_del('extlink_prompt_type_dhtml');
			variable_del('extlink_prompt_type_newwindow');
			variable_del('extlink_prompt_type_hover');*/
			break;
		case '3':	//New Window
			$newwindow_value = $form_state['values']['extlink_prompt_type_newwindow'];
/*			$dhtml_value = $form_state['values']['extlink_prompt_type_dhtml'];
			$web_value = $form_state['values']['extlink_prompt_type_web'];
			$hover_value = $form_state['values']['extlink_prompt_type_hover'];*/
			
			$newwindow_value ? variable_set('extlink_prompt_type_newwindow', $newwindow_value) : variable_del('extlink_prompt_type_newwindow');
/*			$dhtml_value ? variable_set('extlink_prompt_type_dhtml', $dhtml_value) : variable_del('extlink_prompt_type_dhtml');
			$web_value ? variable_set('extlink_prompt_type_web', $web_value) : variable_del('extlink_prompt_type_web');
			$hover_value ? variable_set('extlink_prompt_type_hover', $hover_value) : variable_del('extlink_prompt_type_hover');*/
			
			if(variable_get('extlink_prompt_type_newwindow', '') == 'newwindow_image') {
				variable_set('extlink_newwindow_image_ok', $form_state['values']['extlink_newwindow_image_ok']);
				variable_set('extlink_newwindow_image_cancel', $form_state['values']['extlink_newwindow_image_cancel']);
			}
			
/*			variable_del('extlink_prompt_type_dhtml');
			variable_del('extlink_prompt_type_web');
			variable_del('extlink_prompt_type_hover');*/
			break;
		case '4':	//Onmouse over popup
			$hover_value = $form_state['values']['extlink_prompt_type_hover'];
/*			$dhtml_value = $form_state['values']['extlink_prompt_type_dhtml'];
			$web_value = $form_state['values']['extlink_prompt_type_web'];
			$newwindow_value = $form_state['values']['extlink_prompt_type_newwindow'];*/
			
			$hover_value ? variable_set('extlink_prompt_type_hover', $hover_value) : variable_del('extlink_prompt_type_hover');
/*			$dhtml_value ? variable_set('extlink_prompt_type_dhtml', $dhtml_value) : variable_del('extlink_prompt_type_dhtml');
			$web_value ? variable_set('extlink_prompt_type_web', $web_value) : variable_del('extlink_prompt_type_web');
			$newwindow_value ? variable_set('extlink_prompt_type_newwindow', $newwindow_value) : variable_del('extlink_prompt_type_newwindow');*/
			if(variable_get('extlink_prompt_type_hover', '') == 'hover_image') {
				variable_set('extlink_hover_image_ok', $form_state['values']['extlink_hover_image_ok']);
				variable_set('extlink_hover_image_cancel', $form_state['values']['extlink_hover_image_cancel']);
			}
			variable_set('extlink_prompt_type_hover_backgroundimage', $form_state['values']['extlink_prompt_type_hover_backgroundimage']);
			variable_set('extlink_prompt_type_hover_backgroundwidth', $form_state['values']['extlink_prompt_type_hover_backgroundwidth']);
			variable_set('extlink_prompt_type_hover_backgroundcolor', $form_state['values']['extlink_prompt_type_hover_backgroundcolor']);
			variable_set('extlink_prompt_type_hover_backgroundheight', $form_state['values']['extlink_prompt_type_hover_backgroundheight']);
			variable_set('extlink_prompt_type_hover_timeout', $form_state['values']['extlink_prompt_type_hover_timeout']);
			
/*			variable_del('extlink_prompt_type_dhtml');
			variable_del('extlink_prompt_type_newwindow');
			variable_del('extlink_prompt_type_web');*/
			break;
	}
	drupal_set_message(t('The configuration options have been saved.'));
}

function extlink_admin_settings_form_validate($form_id, &$form_state) {
	$error = t('Only JPEG, PNG and GIF images are allowed.');

	if ($form_state['values']['extlink_prompt_type_dhtml'] == 'dhtml_image' && $form_state['values']['extlink_prompt_type'] == "1") {
		$file_ok = $form_state['values']['extlink_dhtml_image_ok'];
		$file_cancel = $form_state['values']['extlink_dhtml_image_cancel'];
		if (!validate_image($file_ok) || !validate_image($file_cancel)) {
			form_set_error('error', $error);
			return FALSE;
		}
	}

	if ($form_state['values']['extlink_prompt_type_web'] == 'web_image' && $form_state['values']['extlink_prompt_type'] == "2") {
		$file_ok = $form_state['values']['extlink_web_image_ok'];
		$file_cancel = $form_state['values']['extlink_web_image_cancel'];
		if (!validate_image($file_ok) || !validate_image($file_cancel)) {
			form_set_error('error', $error);
			return FALSE;
		}
	}
	return TRUE;
}

function validate_image($file) {
	$validate = _validate_image($file);

	if (!$validate || empty($validate['extension'])) {
		return FALSE;
	}
	return TRUE;
}

/**
 * To display the prompt windows whether DHTML/Normal Web page.
 */
function extlink_dhtml_items() {
	$path = drupal_get_path('module', 'jnj_siteexit');
	drupal_add_js($path.'/extlink_popup.js');
	drupal_add_css($path.'/extlink.css');
	$output = "<script src='" . $path ."/extlink_popup.js'></script>";
	$output .= "<link type='text/css' rel='stylesheet' href='" . $path ."/extlink.css' />";	
	/*$output .= "<div class='extlink_content'>";
	$output .= '<br />'.theme('exit_disclaimer_message', t(variable_get('exit_disclaimer_message', NULL)));
	$output .= '</div>';*/
	if (variable_get('extlink_prompt_type_web', '') == 'web_button') {
		$buttons = drupal_get_form('_extlink_dhtml_items');
		$output .= theme('exit_disclaimer_message', t(variable_get('exit_disclaimer_message', NULL)), $buttons);
		return $output;
	} else {
		$buttons = '<p>';
		$buttons .= _extlink_dhtml_items();
		$buttons .= '</p>';
		
	}
	if (variable_get('extlink_prompt_type_web', '') == 'web_image') {
		$output .= theme('exit_disclaimer_message', t(variable_get('exit_disclaimer_message', NULL)), $buttons);
		return $output;
	}
	$output .= theme('exit_disclaimer_message', t(variable_get('exit_disclaimer_message', NULL)), $buttons);
	echo $output;
}

/**
 * To display the prompt window form items.
 */
function _extlink_dhtml_items() {
	global $base_url;
	$target = variable_get('extlink_window', '');
	$url = $_REQUEST['url'];
	$url_id = $_REQUEST['url_id'];
	$output = '';

	if ($_REQUEST['query'])
		$url .= '&query=' . $_REQUEST['query'];
	if ($_REQUEST['lr'])
		$url .= '&lr=' . $_REQUEST['lr'];

	// To display the DHTML Buttons/Images
	if (variable_get('extlink_prompt_type_dhtml', '') == 'dhtml_button') {
		$output .= '<form name="dhtml_form" method="post" class="exit-popup">';
		$output .= '&nbsp;&nbsp;';
		$output .= '<input type="button" onClick="ok_fn(\'' . $url . '\',\'' . variable_get('extlink_prompt_type', 0) . '\', \'' . $target . '\', \''.$url_id.'\')" value="' . t('Continue') . '">';
		$output .= '&nbsp;&nbsp;';
		$output .= '<input type="button" onClick="cancel_fn(\'' . $url_id . '\',\'' . variable_get('extlink_prompt_type', 0) . '\')" value="' . t('Return') . '">';
		$output .= '</form>';
		return $output;
	} else if (variable_get('extlink_prompt_type_dhtml', '') == 'dhtml_image') {
		$output .= '<a href="javascript:;" onClick="ok_fn(\'' . $url . '\',' . variable_get('extlink_prompt_type', 0) . ',\'' . $target .'\', \''.$url_id.'\')"><img src="' . $base_url . '/' . variable_get('extlink_dhtml_image_ok', '') . '" class="img_buttons"></a>';
		$output .= '&nbsp; <a href="#" onClick="cancel_fn(\'' . $url_id . '\',' . variable_get('extlink_prompt_type', 0) . ')"><img src="' . $base_url . '/' . variable_get('extlink_dhtml_image_cancel', '') . '" class="img_buttons"></a>';

		return $output;
	}

	if (variable_get('extlink_prompt_type_newwindow', '') == 'newwindow_button') {
		$output .= '<form name="newwindow_form" method="post">';
		$output .= '&nbsp;&nbsp;';
		$output .= '<input type="button" onClick="ok_fn(\'' . $url . '\',\'' . variable_get('extlink_prompt_type', 0) . '\', \'' . $target . '\', \''.$url_id.'\')" value="' . t('Continue') . '">';
		$output .= '&nbsp;&nbsp;';
		$output .= '<input type="button" onClick="cancel_fn(\'' . $url_id . '\',\'' . variable_get('extlink_prompt_type', 0) . '\')" value="' . t('Return') . '">';
		$output .= '</form>';
		return $output;
	} else if (variable_get('extlink_prompt_type_newwindow', '') == 'newwindow_image') {
		$output .= '<a href="#" onClick="ok_fn(\'' . $url . '\',' . variable_get('extlink_prompt_type', 0) . ',\'' . $target .'\', \''.$url_id.'\')"><img src="' . $base_url . '/' . variable_get('extlink_newwindow_image_ok', '') . '" class="img_buttons"></a>';
		$output .= '&nbsp; <a href="#" onClick="cancel_fn(\'' . $url_id . '\',' . variable_get('extlink_prompt_type', 0) . ')"><img src="' . $base_url . '/' . variable_get('extlink_newwindow_image_cancel', '') . '" class="img_buttons"></a>';

		return $output;
	}
//onClick="ok_fn(\'' . $url . '\',\'' . variable_get('extlink_prompt_type', 0) . '\', \'' . $target . '\', \''.$url_id.'\')"
//  onClick="ok_fn(\'' . $url . '\',' . variable_get('extlink_prompt_type', 0) . ',\'' . $target .'\', \''.$url_id.'\')"

//cancel
// onClick="cancel_fn(\'' . $url_id . '\',\'' . variable_get('extlink_prompt_type', 0) . '\')"
// onClick="cancel_fn(\'' . $url_id . '\',' . variable_get('extlink_prompt_type', 0) . ')"	
	if (variable_get('extlink_prompt_type_hover', '') == 'hover_button') {
		$output .= '<form name="hover_form" method="post">';
		$output .= '&nbsp;&nbsp;';
		$output .= '<input type="button" id="continue-button" value="' . t('Continue') . '">';
		$output .= '&nbsp;&nbsp;';
		$output .= '<input type="button" id="cancel-button" value="' . t('Return') . '">';
		$output .= '</form>';
		return $output;
	} else if (variable_get('extlink_prompt_type_hover', '') == 'hover_image') {
		$output .= '<a id="continue-image" href="#"><img src="' . $base_url . '/' . variable_get('extlink_hover_image_ok', '') . '" class="img_buttons"></a>';
		$output .= '&nbsp; <a href="#" id="cancel-image"><img src="' . $base_url . '/' . variable_get('extlink_hover_image_cancel', '') . '" class="img_buttons"></a>';

		return $output;
	}
	
	// To display the Normal Web Buttons/Images
	if (variable_get('extlink_prompt_type_web', '') == 'web_button') {
		$form['extlink_web_ok'] = array(
			'#type' => 'submit',
			'#value' => t('Continue'),
		);
		$form['extlink_hidden_web_ok'] = array(
			'#type' => 'hidden',
			'#value' => $url,
		);
		$form['extlink_web_cancel'] = array(
			'#type' => 'submit',
			'#value' => t('Return'),
		);
		$form['extlink_hidden_web_cancel'] = array(
			'#type' => 'hidden',
			'#value' => '',
		);
		return $form;
	} else if (variable_get('extlink_prompt_type_web', '') == 'web_image') {
		$ext_url = base64_encode($url);
		if ($target == "0") {
			$output = l('<img src="' . $base_url . '/' . variable_get('extlink_web_image_ok', '') . '">', 'extlink/path/'.$ext_url, array('html' => TRUE));
		} else {
			$output = l('<img src="' . $base_url . '/' . variable_get('extlink_web_image_ok', '') . '">', 'extlink/path/'.$ext_url, array('html' => TRUE, 'attributes' => array('target' => $target, 'onClick' => 'ok_fn("' . $url . '","'.variable_get('extlink_prompt_type', 0).'")')));
		}
		$output .= '&nbsp;' . l('<img src="' . $base_url . '/' . variable_get('extlink_web_image_cancel', '') . '">', '', array('html' => TRUE));
		return $output;
	}
}

/**
 * To validate the given images in jpg or gif or png format.
 */
function _validate_image($image) {
	$data = @getimagesize($image);
	if (!$data) {
		return FALSE;
	}
	$details = FALSE;
	if (isset($data) && is_array($data)) {
		$extensions = array('1' => 'gif', '2' => 'jpg', '3' => 'png');
		$extension = array_key_exists($data[2], $extensions) ?  $extensions[$data[2]] : '';
		$details = array(
			'width'     => $data[0],
			'height'    => $data[1],
			'extension' => $extension,
			'file_size' => $file_size,
			'mime_type' => $data['mime']
		);
	}
	return $details;
}

/**
 * Navigate to the specified URL with the form arguments.
 */
function _extlink_dhtml_items_submit($form_id, &$form_state) {
	if ($form_state['clicked_button']['#id'] == "edit-extlink-web-ok") {
		if ($_REQUEST['query'])
			$query = 'query='.$_REQUEST['query'];
		if ($_REQUEST['lr'])
			$query .= '&lr='.$_REQUEST['lr'];
		if ($_REQUEST['btnG']) {
			$query .= '&btnG=Google+Search';
			$goto = "http://www.google.com/search";

			drupal_goto($goto, $query);
		} else {
			drupal_goto($form_state['values']['extlink_hidden_web_ok']);
		}
	}
	if ($form_state['clicked_button']['#id'] == "edit-extlink-web-cancel") {
		drupal_goto();
	}
}

/**
 * Navigate to the specified URL when the image buttons are clicked.
 */
function extlink_navigation() {
	$nav = base64_decode(arg(2));
	drupal_goto($nav);
}

function dhtml_js() {
	global $base_root;
	$base_path = base_path() . drupal_get_path('module', 'jnj_siteexit');
	$f_p= $base_root . base_path()."index.php";

$str=<<<EOS
var imgpath ='{$base_root}';
imgpath += window.location.hostname;
//alert(path);
var path;
var dhtmlwindow={
imagefiles:['{$base_path}/js/min.gif', '{$base_path}/js/close.gif', '{$base_path}/js/restore.gif', '{$base_path}/js/resize.gif', '{$base_path}/js/bg.jpg'], //Path to 4 images used by script, in that order
ajaxbustcache: true, //Bust caching when fetching a file via Ajax?

minimizeorder: 0,
tobjects: [], //object to contain references to dhtml window divs, for cleanup purposes

init:function(t,path){
	
	var domwindow=document.createElement("div") //create dhtml window div
	domwindow.id=t
	domwindow.className="dhtmlwindow"
	var domwindowdata=''
	domwindowdata='<div class="drag-handle">'
	domwindowdata+='DHTML Window <div class="drag-controls"><img src="'+this.imagefiles[4]+'" title="" /><img src="'+this.imagefiles[1]+'" title="Close" /></div>'
	domwindowdata+='</div>'
	domwindowdata+='<div class="drag-contentarea"></div>'
	domwindowdata+='<div class="drag-statusarea"><div class="drag-resizearea" style="background: transparent url('+this.imagefiles[3]+') top right no-repeat;">&nbsp;</div></div>'
	domwindowdata+='</div>'
	domwindow.innerHTML=domwindowdata
	document.getElementById("dhtmlwindowholder").appendChild(domwindow)
	this.zIndexvalue=(this.zIndexvalue)? this.zIndexvalue+1 : 100 //z-index value for DHTML window: starts at 0, increments whenever a window has focus
	var t=document.getElementById(t)
	var divs=t.getElementsByTagName("div")
	for (var i=0; i<divs.length; i++){ //go through divs inside dhtml window and extract all those with class="drag-" prefix
		if (/drag-/.test(divs[i].className))
			t[divs[i].className.replace(/drag-/, "")]=divs[i] //take out the "drag-" prefix for shorter access by name
	}
	t.style.zIndex=this.zIndexvalue //set z-index of this dhtml window
	t.handle._parent=t //store back reference to dhtml window
	t.resizearea._parent=t //same
	t.controls._parent=t //same
	t.onclose=function(){return true} //custom event handler "onclose"
	t.onmousedown=function(){dhtmlwindow.zIndexvalue++; this.style.zIndex=dhtmlwindow.zIndexvalue} //Increase z-index of window when focus is on it
	t.handle.onmousedown=dhtmlwindow.setupdrag //set up drag behavior when mouse down on handle div
	t.resizearea.onmousedown=dhtmlwindow.setupdrag //set up drag behavior when mouse down on resize div
	t.controls.onclick=dhtmlwindow.enablecontrols
	t.show=function(){dhtmlwindow.show(this)} //public function for showing dhtml window
	t.hide=function(){dhtmlwindow.close(this)} //public function for hiding dhtml window
	t.setSize=function(w, h){dhtmlwindow.setSize(this, w, h)} //public function for setting window dimensions
	t.moveTo=function(x, y){dhtmlwindow.moveTo(this, x, y)} //public function for moving dhtml window (relative to viewpoint)
	t.isResize=function(bol){dhtmlwindow.isResize(this, bol)} //public function for specifying if window is resizable
	t.isScrolling=function(bol){dhtmlwindow.isScrolling(this, bol)} //public function for specifying if window content contains scrollbars
	t.load=function(contenttype, contentsource, title){dhtmlwindow.load(this, contenttype, contentsource, title)} //public function for loading content into window
	this.tobjects[this.tobjects.length]=t
	return t //return reference to dhtml window div
},

open:function(t, contenttype, contentsource, title, path, attr, recalonload){
	var d=dhtmlwindow //reference dhtml window object
	function getValue(Name){
		var config=new RegExp(Name+"=([^,]+)", "i") //get name/value config pair (ie: width=400px,)
		return (config.test(attr))? parseInt(RegExp.$1) : 0 //return value portion (int), or 0 (false) if none found
	}
	if (document.getElementById(t)==null) //if window doesn't exist yet, create it
		t=this.init(t,path) //return reference to dhtml window div
	else
		t=document.getElementById(t)
	t.setSize(getValue(("width")), (getValue("height"))) //Set dimensions of window
	var xpos=getValue("center")? "middle" : getValue("left") //Get x coord of window
	var ypos=getValue("center")? "middle" : getValue("top") //Get y coord of window
	//t.moveTo(xpos, ypos) //Position window
	if (typeof recalonload!="undefined" && recalonload=="recal" && this.scroll_top==0){ //reposition window when page fully loads with updated window viewpoints?
		if (window.attachEvent && !window.opera) //In IE, add another 400 milisecs on page load (viewpoint properties may return 0 b4 then)
			this.addEvent(window, function(){setTimeout(function(){t.moveTo(xpos, ypos)}, 400)}, "load")
		else
			this.addEvent(window, function(){t.moveTo(xpos, ypos)}, "load")
	}
	t.isResize(getValue("resize")) //Set whether window is resizable
	t.isScrolling(getValue("scrolling")) //Set whether window should contain scrollbars
	t.style.visibility="visible"
	t.style.display="block"
	t.contentarea.style.display="block"
	t.moveTo(xpos, ypos) //Position window
	t.load(contenttype, contentsource, title)
	if (t.state=="minimized" && t.controls.firstChild.title=="Restore"){ //If window exists and is currently minimized?
		t.controls.firstChild.setAttribute("src", dhtmlwindow.imagefiles[0]) //Change "restore" icon within window interface to "minimize" icon
		t.controls.firstChild.setAttribute("title", "Minimize")
		t.state="fullview" //indicate the state of the window as being "fullview"
	}
	return t
},

setSize:function(t, w, h){ //set window size (min is 150px wide by 100px tall)
	t.style.width=Math.max(parseInt(w), 150)+"px"
	t.contentarea.style.height=Math.max(parseInt(h), 100)+"px"
},

moveTo:function(t, x, y){ //move window. Position includes current viewpoint of document
	this.getviewpoint() //Get current viewpoint numbers
	t.style.left=(x=="middle")? this.scroll_left+(this.docwidth-t.offsetWidth)/2+"px" : this.scroll_left+parseInt(x)+"px"
	t.style.top=(y=="middle")? this.scroll_top+(this.docheight-t.offsetHeight)/2+"px" : this.scroll_top+parseInt(y)+"px"
},

isResize:function(t, bol){ //show or hide resize inteface (part of the status bar)
	t.statusarea.style.display=(bol)? "block" : "none"
	t.resizeBool=(bol)? 1 : 0
},

isScrolling:function(t, bol){ //set whether loaded content contains scrollbars
	t.contentarea.style.overflow=(bol)? "auto" : "hidden"
},

load:function(t, contenttype, contentsource, title){ //loads content into window plus set its title (3 content types: "inline", "iframe", or "ajax")
	var contenttype=contenttype.toLowerCase() //convert string to lower case
	if (typeof title!="undefined")
		t.handle.firstChild.nodeValue=title
	if (contenttype=="inline")
		t.contentarea.innerHTML=contentsource
	else if (contenttype=="div"){
		t.contentarea.innerHTML=document.getElementById(contentsource).innerHTML //Populate window with contents of specified div on page
		document.getElementById(contentsource).style.display="none" //hide that div
	}
	else if (contenttype=="iframe"){
		t.contentarea.style.overflow="hidden" //disable window scrollbars, as iframe already contains scrollbars
		if (!t.contentarea.firstChild || t.contentarea.firstChild.tagName!="IFRAME") //If iframe tag doesn't exist already, create it first
			t.contentarea.innerHTML='<iframe src="{$f_p}" width=100% height=100%  marginwidth="0" marginheight="0" scrolling="no" frameBorder="0" name="_iframe-'+t.id+'"></iframe>'
		window.frames["_iframe-"+t.id].location.replace(contentsource) //set location of iframe window to specified URL
		}
	else if (contenttype=="ajax"){
		this.ajax_connect(contentsource, t) //populate window with external contents fetched via Ajax
	}
	t.contentarea.datatype=contenttype //store contenttype of current window for future reference
},

setupdrag:function(e){
	var d=dhtmlwindow //reference dhtml window object
	var t=this._parent //reference dhtml window div
	d.etarget=this //remember div mouse is currently held down on ("handle" or "resize" div)
	var e=window.event || e
	d.initmousex=e.clientX //store x position of mouse onmousedown
	d.initmousey=e.clientY
	d.initx=parseInt(t.offsetLeft) //store offset x of window div onmousedown
	d.inity=parseInt(t.offsetTop)
	d.width=parseInt(t.offsetWidth) //store width of window div
	d.contentheight=parseInt(t.contentarea.offsetHeight) //store height of window div's content div
	if (t.contentarea.datatype=="iframe"){ //if content of this window div is "iframe"
		t.style.backgroundColor="#F8F8F8" //colorize and hide content div (while window is being dragged)
		t.contentarea.style.visibility="hidden"
	}
	document.onmousemove=d.getdistance //get distance travelled by mouse as it moves
	document.onmouseup=function(){
		if (t.contentarea.datatype=="iframe"){ //restore color and visibility of content div onmouseup
			t.contentarea.style.backgroundColor="white"
			t.contentarea.style.visibility="visible"
		}
		d.stop()
	}
	return false
},

getdistance:function(e){
	var d=dhtmlwindow
	var etarget=d.etarget
	var e=window.event || e
	d.distancex=e.clientX-d.initmousex //horizontal distance travelled relative to starting point
	d.distancey=e.clientY-d.initmousey
	if (etarget.className=="drag-handle") //if target element is "handle" div
		d.move(etarget._parent, e)
	else if (etarget.className=="drag-resizearea") //if target element is "resize" div
		d.resize(etarget._parent, e)
	return false //cancel default dragging behavior
},

getviewpoint:function(){ //get window viewpoint numbers
	var ie=document.all && !window.opera
	var domclientWidth=document.documentElement && parseInt(document.documentElement.clientWidth) || 100000 //Preliminary doc width in non IE browsers
	this.standardbody=(document.compatMode=="CSS1Compat")? document.documentElement : document.body //create reference to common "body" across doctypes
	this.scroll_top=(ie)? this.standardbody.scrollTop : window.pageYOffset
	this.scroll_left=(ie)? this.standardbody.scrollLeft : window.pageXOffset
	this.docwidth=(ie)? this.standardbody.clientWidth : (/Safari/i.test(navigator.userAgent))? window.innerWidth : Math.min(domclientWidth, window.innerWidth-16)
	this.docheight=(ie)? this.standardbody.clientHeight: window.innerHeight
},

rememberattrs:function(t){ //remember certain attributes of the window when it's minimized or closed, such as dimensions, position on page
	this.getviewpoint() //Get current window viewpoint numbers
	t.lastx=parseInt((t.style.left || t.offsetLeft))-dhtmlwindow.scroll_left //store last known x coord of window just before minimizing
	t.lasty=parseInt((t.style.top || t.offsetTop))-dhtmlwindow.scroll_top
	t.lastwidth=parseInt(t.style.width) //store last known width of window just before minimizing/ closing
},

move:function(t, e){
	t.style.left=dhtmlwindow.distancex+dhtmlwindow.initx+"px"
	t.style.top=dhtmlwindow.distancey+dhtmlwindow.inity+"px"
},

resize:function(t, e){
	t.style.width=Math.max(dhtmlwindow.width+dhtmlwindow.distancex, 150)+"px"
	t.contentarea.style.height=Math.max(dhtmlwindow.contentheight+dhtmlwindow.distancey, 100)+"px"
},

enablecontrols:function(e){
	var d=dhtmlwindow
	var sourceobj=window.event? window.event.srcElement : e.target //Get element within "handle" div mouse is currently on (the controls)
	if (/Minimize/i.test(sourceobj.getAttribute("title"))) //if this is the "minimize" control
		d.minimize(sourceobj, this._parent)
	else if (/Restore/i.test(sourceobj.getAttribute("title"))) //if this is the "restore" control
		d.restore(sourceobj, this._parent)
	else if (/Close/i.test(sourceobj.getAttribute("title"))) //if this is the "close" control
		d.close(this._parent)
	return false
},

minimize:function(button, t){
	dhtmlwindow.rememberattrs(t)
	button.setAttribute("src", dhtmlwindow.imagefiles[2])
	button.setAttribute("title", "Restore")
	t.state="minimized" //indicate the state of the window as being "minimized"
	t.contentarea.style.display="none"
	t.statusarea.style.display="none"
	if (typeof t.minimizeorder=="undefined"){ //stack order of minmized window on screen relative to any other minimized windows
		dhtmlwindow.minimizeorder++ //increment order
		t.minimizeorder=dhtmlwindow.minimizeorder
	}
	t.style.left="10px" //left coord of minmized window
	t.style.width="200px"
	var windowspacing=t.minimizeorder*10 //spacing (gap) between each minmized window(s)
	t.style.top=dhtmlwindow.scroll_top+dhtmlwindow.docheight-(t.handle.offsetHeight*t.minimizeorder)-windowspacing+"px"
},

restore:function(button, t){
	dhtmlwindow.getviewpoint()
	button.setAttribute("src", dhtmlwindow.imagefiles[0])
	button.setAttribute("title", "Minimize")
	t.state="fullview" //indicate the state of the window as being "fullview"
	t.style.display="block"
	t.contentarea.style.display="block"
	if (t.resizeBool) //if this window is resizable, enable the resize icon
		t.statusarea.style.display="block"
	t.style.left=parseInt(t.lastx)+dhtmlwindow.scroll_left+"px" //position window to last known x coord just before minimizing
	t.style.top=parseInt(t.lasty)+dhtmlwindow.scroll_top+"px"
	t.style.width=parseInt(t.lastwidth)+"px"
},


close:function(t){
	try{
		var closewinbol=t.onclose()
	}
	catch(err){ //In non IE browsers, all errors are caught, so just run the below
		var closewinbol=true
 }
	finally{ //In IE, not all errors are caught, so check if variable isn't defined in IE in those cases
		if (typeof closewinbol=="undefined"){
		//	alert("An error has occured somwhere inside your \"onclose\" event handler")
			var closewinbol=true
		}
	}
	if (closewinbol){ //if custom event handler function returns true
		if (t.state!="minimized") //if this window isn't currently minimized
			dhtmlwindow.rememberattrs(t) //remember window's dimensions/position on the page before closing
		t.style.display="none"
	}
	return closewinbol
},

show:function(t){
	if (t.lastx) //If there exists previously stored information such as last x position on window attributes (meaning it's been minimized or closed)
		dhtmlwindow.restore(t.controls.firstChild, t) //restore the window using that info
	else
		t.style.display="block"
	t.state="fullview" //indicate the state of the window as being "fullview"
},

ajax_connect:function(url, t){
	var page_request = false
	var bustcacheparameter=""
	if (window.XMLHttpRequest) // if Mozilla, IE7, Safari etc
		page_request = new XMLHttpRequest()
	else if (window.ActiveXObject){ // if IE6 or below
		try {
		page_request = new ActiveXObject("Msxml2.XMLHTTP")
		} 
		catch (e){
			try{
			page_request = new ActiveXObject("Microsoft.XMLHTTP")
			}
			catch (e){}
		}
	}
	else
		return false
	page_request.onreadystatechange=function(){dhtmlwindow.ajax_loadpage(page_request, t)}
	if (this.ajaxbustcache) //if bust caching of external page
		bustcacheparameter=(url.indexOf("?")!=-1)? "&"+new Date().getTime() : "?"+new Date().getTime()
	page_request.open('GET', url+bustcacheparameter, true)
	page_request.send(null)
},

ajax_loadpage:function(page_request, t){
	if (page_request.readyState == 4 && (page_request.status==200 || window.location.href.indexOf("http")==-1)){
		t.contentarea.innerHTML=page_request.responseText
		alert(page_request.responseText);
	}
},


stop:function(){
	dhtmlwindow.etarget=null //clean up
	document.onmousemove=null
	document.onmouseup=null
},

addEvent:function(target, functionref, tasktype){ //assign a function to execute to an event handler (ie: onunload)
	var tasktype=(window.addEventListener)? tasktype : "on"+tasktype
	if (target.addEventListener)
		target.addEventListener(tasktype, functionref, false)
	else if (target.attachEvent)
		target.attachEvent(tasktype, functionref)
},

cleanup:function(){
	for (var i=0; i<dhtmlwindow.tobjects.length; i++){
		dhtmlwindow.tobjects[i].handle._parent=dhtmlwindow.tobjects[i].resizearea._parent=dhtmlwindow.tobjects[i].controls._parent=null
	}
	window.onload=null
}

} //End dhtmlwindow object

document.write('<div id="dhtmlwindowholder"><span style="display:none">.</span></div>') //container that holds all dhtml window divs on page
window.onunload=dhtmlwindow.cleanup

dhtmlwindow.addEvent(window, function(){if (typeof dhtmlmodal!="undefined") dhtmlmodal.adjustveil()}, "resize")
EOS;

return $str;
}