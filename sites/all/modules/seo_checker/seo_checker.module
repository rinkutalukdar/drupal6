<?php
define('PAGINATION_MIN', '0');
define('PAGINATION_MAX', '50');
define('MAX_RECORDS', '150');
define('DEBUG', '0');
define('META_DESC_LENGTH', 156);
define('META_KW_LENGTH', 15);

/**
 * @file
 * The core of the SEO Checker.
 *
 * This file contains the hook_menu implementation such as the different
 * functions that hook into the process of node creation and modification
 * in order to perform the checks based on the implemented rules.
 *
 * The SEO Checker requires at least one submodule that defines SEO rules and
 * implements the checks for them. The core module comes along with two
 * submodules that implement some basic checks.
 *
 * In order to implement your own rules, implement hook_register_seo_rules().
 */
require_once('./'. drupal_get_path('module', 'seo_checker') .'/inc/seo_checker.admin.inc');
require_once('./'. drupal_get_path('module', 'seo_checker') .'/inc/seo_checker.theme.inc');

/**
  * Includes the rules from the file paths defined in the back-end.
  */
function include_seo_rules() {
  $global_rules = $sector_rules = array();

  //get the file paths.
  $global_rules_path = variable_get('global_rules_path', '');
  $sector_rules_path = variable_get('sector_rules_path', '');
  //if the paths are not set, then display an status message to set them.
  
  //include the files
  if ($global_rules_path != '') {
    require_once($global_rules_path);
    //read the file timestamp and set the variable.
    $global_rules = global_seo_rules();
  }
  
  if ($sector_rules_path != '') {
  require_once($sector_rules_path);
  //read the file timestamp and set the variable. //about rules changing over time
  $sector_rules = sector_seo_rules();  
  }
 //update the Rule name as Global/Sector 
  foreach ( $global_rules as $grule_id => $grules ) {
  $global_rules[$grule_id]['name'] = "Global: " . $grules['name'];
  }
  if(sizeof($sector_rules) > 0) {

		//override the global rules with sector rules.
		foreach ( $sector_rules as $rule_id => $rules ) {
		//scenario 1: If the rule is empty, then check for "default threshold" and if the global and sectore are different, then add that to the global array
		if ( DEBUG == 1 ) { 
			echo $rules['default threshold'] . " - ";
			echo $global_rules[$rule_id]['default threshold'] . "----";
			echo $rule_id . array_key_exists($rule_id, $global_rules) . "<br>";
			//echo "<PRE>";print_r($global_rules);
		}
		if ($rules['callback'] == '' && array_key_exists($rule_id, $global_rules) && ($global_rules[$rule_id]['default threshold'] != $rules['default threshold'])) {
			if (DEBUG == 1) { 
				echo "in case 1";
			}
			$rules['name'] = "Sector: " . $rules['name']; //update the Rule name as Global/Sector 
			$global_rules[$rule_id]['default threshold'] = $rules['default threshold'];
		}	
		//scenario 2: If the rule is not empty, then add the rule to the global array
		if ($rules['callback'] != '') {
			$rules['name'] = "Sector: " . $rules['name']; //update the Rule name as Global/Sector 
			$global_rules[$rule_id] = $rules;
		}
		}
	}
  if (DEBUG == 1) { 
    echo "<PRE>"; 
    print_r($global_rules);
    //print_r($sector_rules);  echo "</PRE>"; 
    exit;  
  }
return $global_rules;
}

/**
 * Implementation of hook_init
 */
function seo_checker_init() {
  drupal_add_css(drupal_get_path('module', 'seo_checker') ."/css/seo_checker.css");
  //check for the date of rules file modified 
}

/**
 * Implementation of hook_menu().
 *
 * @return array
 */
function seo_checker_menu() {
  $items['admin/settings/seo_checker'] = array(
    'title' => t('SEO Checker'),
    'description' => t('Manage SEO Checker'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('seo_checker_settings'),
    'access arguments' => array('administer seo_checker configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['admin/settings/seo_checker/thresholds'] = array(
    'title' => t('SEO Rule Thresholds'),
    'description' => t('Set the tresholds for the different SEO rules.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('seo_checker_settings'),
    'access arguments' => array('administer seo_checker configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  
  $items['admin/settings/seo_checker/visibility'] = array(
    'title' => t('Report visibility settings'),
    'description' => t('Set the report visibility based on user roles.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('seo_checker_rolebased_settings'),
    'access arguments' => array('administer seo_checker configuration'),
    'type' => MENU_LOCAL_TASK,
   'weight' => 1,
  );  

  $items['admin/settings/seo_checker/report'] = array(
    'title' => t('SEO Compliance report'),
    'description' => t('SEO Compliance report.'),
    'page callback' => 'seo_checker_report',
    'access arguments' => array('administer seo_checker configuration'),
    'type' => MENU_LOCAL_TASK,
   'weight' => 2,
  );

 $items['admin/settings/seo_checker/pdfexport'] = array(
    'title' => t('SEO Checker'),
    'description' => t('Manage SEO Checker'),
    'page callback' => 'getPDFReport',
    'access arguments' => array('administer seo_checker configuration'),
    'type' => MENU_CALLBACK,
  );  
  
  $items['admin/settings/seo_checker/report1'] = array(
    'title' => t('SEO Compliance report'),
    'description' => t('SEO Compliance report.'),
    'page callback' => 'seo_checker_report1',
    'access arguments' => array('administer seo_checker configuration'),    
  ); 

  $items['admin/settings/seo_checker/report2'] = array(
    'title' => t('SEO Compliance report'),
    'description' => t('SEO Compliance report.'),
    'page callback' => 'seo_checker_report2',
    'access arguments' => array('administer seo_checker configuration'),    
  ); 

  $items['admin/settings/seo_checker/seoreport'] = array(
    'title' => t('Failed Nodes List'),
    'description' => t('SEO failed nodes report.'),
    'page callback' => 'getFailedNodesList',
  'access arguments' => array('administer seo_checker configuration'), 
  'type' => MENU_LOCAL_TASK,
  'weight' => 3,
  );
  
  $items['admin/settings/seo_checker/proxysettings'] = array(
    'title' => t('Proxy Settings'),
    'description' => t('If any HTTP proxy settings, configure here.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('seo_checker_proxy_settings'),
    'access arguments' => array('administer seo_checker configuration'),
    'type' => MENU_LOCAL_TASK,
  'weight' => 4,
  );
  
  $items['admin/settings/seo_checker/paths'] = array(
    'title' => t('Path Settings'),
    'description' => t('Set the paths for Global and Sector/Region specific'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('seo_checker_rules_inclusion_settings'),
    'access arguments' => array('administer seo_checker configuration'),
    'type' => MENU_LOCAL_TASK,
  'weight' => 5,
  );  

  $items['seoonetimerun'] = array(
    'title' => t('SEO Onetime Run'),
    'description' => t('Execute this link to get all the nodes go through seo check and stores the data for report.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('batch_seonetimerun_simple_form'),
  'access arguments' => array('administer seo_checker configuration'),
  'type' => MENU_NORMAL_ITEM,    
  );
/*
    $items['getSEOData'] = array(
    'title' => t('SEO Onetime Run'),
    'description' => t('Execute this link to get all the nodes go through seo check and stores the data for report.'),
    'page callback' => 'getSEOData',
  'access arguments' => array('administer seo_checker configuration'),
  'type' => MENU_NORMAL_ITEM,    
  );
  */
  
  return $items;
}

function getFailedNodesList() {
    $output = '';
  $output .= '<h1>' . t('Listing Failed Nodes') . '</h1>';
    $output .= getFailedNodesListURLs();
  $output .= '<h1>' . t('Listing Top 10 Pages') . '</h1>';
    $output .= seo_checker_top_pages();
  $output .= '<h1>' . t('Listing Failed Custom URL') . '</h1>';
    $output .= getFailedCustomURLs();
    return $output;
}
/**
 * Form builder; Batch processing
 *
 * @see batch_seonetimerun_simple_form_submit()
 */
function batch_seonetimerun_simple_form() {
  $form['helptext'] = array(
    '#value' => 'Please use this feature to do an SEO Check for the existing content. <BR><font color="red"><b>Caution:</b> This might be useful when you are using this for the first time.</font>',
    );
  $form['batch'] = array(
    '#type' => 'select',
    '#title' => 'Choose batch',
    '#options' => array(
      'batch_2' => 'Load all nodes from XMLSitemap')
    );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Go',
    );

  return $form;
}

function batch_seonetimerun_simple_form_submit($form, &$form_state) {
  $values =& $form_state['values'];
  //store the values in to the table so we can retrieve in batches for seo check.
  $nodeCTypeArray = array_filter(getURLs());
  //echo "<PRE>";print_r($nodeCTypeArray);exit;	
  $maxcount = count($nodeCTypeArray) < MAX_RECORDS ? MAX_RECORDS : count($nodeCTypeArray) ;
  //echo $maxcount; exit;
  $count = 1;
  $is_existing_data = FALSE;
  for ($n = 1; $n <= $maxcount; $n++) {
  //echo "<PRE>";print_r($nodeCTypeArray);exit;	
  $path = $nodeCTypeArray[$n];
  if ($path == '/') continue;
  //Iterating node by node to check CCk fields
  $node_path = drupal_get_normal_path(urldecode($path));
    
	if(!empty($node_path)) {
	  $is_existing_data = db_result(db_query("SELECT COUNT(*) FROM {seo_siteurls} WHERE LOWER(nodeloc) LIKE LOWER('%%%s%%')", $node_path));
	  if (!$is_existing_data) {
		db_query("INSERT INTO {seo_siteurls} (nodeloc) VALUES ('%s')", $node_path);
	  }
	}
  }
  //exit;
  $function = 'batch_seo_' . $values['batch'];
  $batch = $function();
  batch_set($batch);

  // Redirection takes place as usual.
  $form_state['redirect'] = 'seoonetimerun';
}

/**
 * Batch 2 : load all nodes 5 by 5, 20 times (Multipart operation)
 */
function batch_seo_batch_2() {
  $operations = array();
  //for ($i = 0; $i<20; $i++) {
    $operations[] = array('batch_seo_op_2', array());
  //}
  $batch = array(
    'operations' => $operations,
    'finished' => 'batch_seo_finished',
    // We can define custom messages instead of the default ones.
    'title' => t('Processing SEO report'),
    'init_message' => t('SEO Rules check is starting.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('SEO Rules check has encountered an error.'),
  );
  return $batch;
}

/**
 * Batch operation for batch 2 - One-time run : load all nodes, 5 by five
 * This is a multipart operation, using the
 */
function batch_seo_op_2(&$context) {
  // Use the $context['sandbox'] at your convenience to store the
  // information needed to track progression between successive calls.
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = db_result(db_query('SELECT COUNT(DISTINCT locid) FROM {seo_siteurls}'));
  }

  
  // Process nodes by groups of 5 (arbitrary value).
  // When a group of five is processed, the batch update engine determines
  // whether it should continue processing in the same request or provide
  // progress feedback to the user and wait for the next request.
  $limit = 10;
//echo sprintf("SELECT locid, nodeloc FROM {seo_siteurls} WHERE locid > %d ORDER BY locid ASC", $context['sandbox']['current_node'], 0, $limit);
  // Retrieve the next group of nids.
  $result = db_query_range("SELECT locid, nodeloc FROM {seo_siteurls} WHERE locid > %d ORDER BY locid ASC", $context['sandbox']['current_node'], 0, $limit);
  $count = 1;
  while ($row = db_fetch_array($result)) {
  //echo "<PRE>";print_r($row);exit;
  
  
  
  $pos = strpos($row['nodeloc'], 'node');
  if ($pos === FALSE) {
    //continue;
    //custom URL
	if(!empty($row['nodeloc'])) {
		$node = new stdClass();
		$node->title = $row['nodeloc'];
		$node->type = 'customurl';
		$node->nid = seo_checker_perform_checks_custom_urls($row['nodeloc']);
	}
  }
  else { 
    //Iterating node by node to check CCk fields
    $node_path = explode('/', $row['nodeloc']);
    $nid = $node_path[1];
    $node = node_load($nid);
    //echo "<PRE>";print_r($node);exit;
    $nodeDataArray = convertObjtoArray($node);
    seo_checker_perform_checks($node, $nodeDataArray);
  }
    // Store some result for post-processing in the finished callback.
    $context['results'][] = $node->nid . ' : ' . check_plain($node->title);

    // Update our progress information.
    $context['sandbox']['progress']++;
    $context['sandbox']['current_node'] = $row['locid'];
    //$context['message'] = check_plain($node->title);
  $context['message'] = t('Now processing %entity @last_id (@progress of @count).', array('%entity' => check_plain($node->title), '@last_id' => $row['locid'], '@progress' => $row['locid'], '@count' => $context['sandbox']['max']));
  }

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] >= $context['sandbox']['max']) {
    // Because the batch engine cannot handle a finished result greater than
    // one due to http://drupal.org/node/600836 we should always check if
    // the current progress is equal or greater to the total number if items
    // to process. For example, if a node is added while this batch process
    // is running, the progress value will end up being one greater than the
    // max value. This will cause an infinite loop. We prevent this from
    // happening by always checking if progress is greater or equal to max.
    $context['finished'] = 1;
  }
  else {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Batch 'finished' callback used by both batch 1 and batch 2
 */
function batch_seo_finished($success, $results, $operations) {
  if ($success) {
    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed...
    $message = count($results) . ' processed.';
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
	
    $error_operation = reset($operations);
    $message = 'An error occurred while processing ' . $error_operation[0] . ' with arguments :' . print_r($error_operation[0], TRUE);
  }
  drupal_set_message($message);
}

/*
 * Helper function for extracting the URLs from XMLSitemap
 */ 
function getURLs() {
  //$url = $GLOBALS['base_url'].'/sitemap.xml';
  module_load_include('pages.inc', 'xmlsitemap');
  $sitemap = xmlsitemap_sitemap_load_by_context();
  if (!$sitemap) {
    return drupal_not_found();
  }
  $chunk = xmlsitemap_get_current_chunk($sitemap);
  $file = xmlsitemap_sitemap_get_file($sitemap, $chunk);
  $url = get_site_base_url();
  $url = $url . '/' . $file;
  
  $xml = new SimpleXMLElement($url, NULL, TRUE);
  
  $site_base_url = variable_get("xmlsitemap_base_url", '');
  
  if(empty($site_base_url)) {
	 $site_base_url = $GLOBALS['base_url'];
  }
  
  foreach ( $xml->url as $node_url ) {
    $nodes[] = str_replace($site_base_url. '/', '', (string)$node_url->loc);
  }
  return $nodes;
}

/* 
 * This is to check the HTTP proxy authentication.
 */
function get_site_base_url() {
  $proxy_user = variable_get('proxy_user', '');
  $proxy_pass = variable_get('proxy_pass', '');
  if ($proxy_user != '' && $proxy_pass != '') {
  $url = str_replace('http://', 'http://' . $proxy_user . ':' . $proxy_pass . '@', $GLOBALS['base_url']);
  } 
  else {
  $url = $GLOBALS['base_url'];
  }
  return $url;
}

//getSEOData();
/*
 * Function to generate seo report based on the XMLSitemap.
 */
function getSEOData() {
  $nodeCTypeArray = array_filter(getURLs());
  //echo "<PRE>";print_r($nodeCTypeArray);exit;
  $count = 1;
  $maxcount = count($nodeCTypeArray) < MAX_RECORDS ? count($nodeCTypeArray) : MAX_RECORDS ;
  for ($n = 1; $n <= 5; $n++) {
    $path = $nodeCTypeArray[$n];
    if ($path == '/') continue;
      //Iterating node by node to check CCk fields
      //echo drupal_lookup_path('alias', $path)."<br>";
      $normal_path = drupal_get_normal_path(urldecode($path));
      $pos = strpos($normal_path, 'node');
      if ($pos === FALSE) {
        //custom URL
        seo_checker_perform_checks_custom_urls($normal_path);
      }
      else {
      continue;
        //node URL
        $node_path = explode('/', $normal_path);
        $nid = $node_path[1];
        //if ( $nid) {
        $node = node_load($nid);
        //echo "<PRE>";print_r($node);exit;
        $nodeArray = array($node);
        //print_r($nodeArray[0]);exit;
        foreach ( $nodeArray[0] as $nodeKey => $nodeValue ) {
          $nodeDataArray[$nodeKey]=$nodeValue;
        }
        //$percentageData = check_seo_compliance($node, $nodeDataArray);	
        //echo $nid . "<br>";
        seo_checker_perform_checks($node, $nodeDataArray);
      }
  }
  return 1;
}

function getFailedNodesListURLs() {
  drupal_add_js(drupal_get_path('module', 'seo_checker') ."/js/seo_checker.js");
  $sql = "SELECT * FROM {seo_compliance_data} WHERE nodeid > 0 ";
    $results_count = db_result(db_query("SELECT COUNT(*) FROM {seo_compliance_data} WHERE nodeid > 0 "));
    $header =  array(
    array('data' => t('Title'), 'field' => 'nodetitle'),
    t('Failed Rules'),
    array('data' => t('Type'), 'field' => 'nodetype'),
    array('data' => t('Failed Percentage'), 'field' => 'nodepercentage'),
   t('Edit') );
    $sql .= tablesort_sql($header);
  $result = pager_query($sql, PAGINATION_MAX, 0);
  $destination = drupal_get_destination();
  if ($results_count) {
      
    while ($com_row = db_fetch_array($result)) {
      /* iterate the rules array */
      $rules_output = '';
      $rules_output .= '<table border="0" id="ruledata_' . $com_row['nodeid'] . '" class="ruledata" style="display:none"><tr><th>Rule name</th><th>Rule Message</th></tr>';
             $rule_result = db_query("SELECT * FROM {seo_rules_data} WHERE nodeid = %d ORDER BY nodeid ", $com_row['nodeid']);
     while ($rule_row = db_fetch_array($rule_result)) {
      $rules_output .= '<tr><td class="seorulename">';
      $rules_output .= $rule_row['seorulename'];
      $rules_output .= '</td>';
      $rules_output .= '<td class="seorulemessage">';
      $rules_output .= $rule_row['seorulemessage'];
      $rules_output .= '</td></tr>';
      }
      $rules_output .= '</table>';
      $row = array();
      $row[] = l($com_row['nodetitle'], 'node/' . $com_row['nodeid']);
      $row[] = '<a onClick="showRules(' . $com_row['nodeid'] . ')" href="javascript:void(0)" id="rule-data-link">View Failed Rules</a>' . $rules_output;
      $row[] = $com_row['nodetype'];
      $row[] = $com_row['nodepercentage'] . '%';
      $row[] = l(t('Edit'), 'node/'. $com_row['nodeid'] . '/edit', array('query' => $destination));
      $rows[] = $row;
    }
    $output .= '<div style="font-size: 12px;font-weight: bold;text-align: right;">' . l('Export as PDF', 'admin/settings/seo_checker/pdfexport', array('query' => $destination)) . '</div>';
  }
  else {
    $output .= '<div style="font-size: 12px;font-weight: bold;text-align: right;">' . l('Click Here', 'seoonetimerun') . t(' for ONE TIME SEO Check for exsiting data.') . '</div>';
    $rows[] = array(array('data' => t('No data available.'), 'colspan' => '5'));
  }
  
  $output .= theme('table', $header, $rows);
    //generatePDF($rules_output);
  $output .= theme('pager', NULL, PAGINATION_MAX, 0);
    //$output .= getFailedCustomURLs();
  return $output;
}

function getFailedCustomURLs() {
   $sql_count = db_result(db_query("SELECT COUNT(*) FROM {seo_compliance_custom_data } WHERE nodetype='customurl'"));
  
   $sql = "SELECT * FROM {seo_compliance_custom_data } WHERE nodetype='customurl'";
   $header =  array(
    array('data' => t('Title'), 'field' => 'nodetitle'),
    t('Failed Rules'),
    array('data' => t('Type'), 'field' => 'nodetype'),
    array('data' => t('Failed Percentage'), 'field' => 'nodepercentage'),
    );
   $sql .=   tablesort_sql($header);
  $result = pager_query($sql, PAGINATION_MAX, 1);
  if ($sql_count) {
    $i=1;
    while ($fnode = db_fetch_array($result)) {
      
    //Fetch the failed rules for the this node
    $rule_result = db_query("SELECT * FROM {seo_rules_data} WHERE nodeid = %d ORDER BY nodeid DESC", $fnode['seoid']);
        /* iterate the rules array */
    $rules_output = '';
    $rules_output .= '<table border="0" id="ruledata_' . $fnode['seoid'] . $i . '" class="ruledata" style="display:none"><tr><th>Rule name</th><th>Rule Message</th></tr>';
    while ($rule_row = db_fetch_array($rule_result)) {		  
      $rules_output .= '<tr><td class="seorulename">';
      $rules_output .= $rule_row['seorulename'];
      $rules_output .= '</td>';
      $rules_output .= '<td class="seorulemessage">';
      $rules_output .= $rule_row['seorulemessage'];
      $rules_output .= '</td></tr>';
    }
    $rules_output .= '</table>';
    
    $row = array();
    $row[] = l($fnode['nodetitle'], $fnode['nodetitle']);
    $row[] = '<a onClick="showcustomRules(' . $fnode['seoid'] . ',' . $i . ')" href="javascript:void(0)" id="rule-data-link">View Failed Rules</a>' . $rules_output;
    $row[] = $fnode['nodetype'];
    $row[] = $fnode['nodepercentage'] . '%';
    $rows[] = $row;
         $i++;
    }
  }
  else {
    $rows[] = array(array('data' => t('No custom urls available.'), 'colspan' => '4'));
  }
  //$rule_message = drupal_render($seo_check_results);
  $output .= theme('table', $header, $rows);
    //generatePDF($rules_output);
  $output .= theme('pager', NULL, PAGINATION_MAX, 1);
  return $output;
}

//getPDFReport();
function getPDFReport() {
  global $base_url;
  //Build page 1 
  $report_page1 = '<h1 align="center">SEO Compliance Report</h1>';
  $report_page1 .= '<h2 align="center">Sitename: ' . variable_get('site_name', '') . '</h2>';
  $report_page1 .= '<h4 align="center">Report Date: ' . date('d-F-Y') . '</h4>';
  $report_page1 .= '<p style="page-break-before: always">&nbsp;</p>';
  
  //Build page 2
  $finalDataArray = getNodeTypesWithPercentage();
  $finalArray = array_combine($finalDataArray[0], $finalDataArray[1]);
  $finalArray = array_filter($finalArray);
  //print_r($finalArray);exit;
  
  $report_page2 = '<table border="0" cellpadding="3" cellspacing="0" width="50%" align="center">';
  $sum1 = overallpercent();
  //print_r($sum1);exit;
  $sum = $sum1['percentage'];
  $report_page2 .= '<tr style="font-size:16pt"><td style="text-align: left;" colspan="2">This website is ' . $sum . '% SEO Compliant.</td>';
  $report_page2 .= '<tr><td>&nbsp;</td><td>&nbsp;</td>';
  $report_page2 .= '<tr><th style="text-align:left; color:#fff; background-color:#15317E; border-right:1px black solid; border-top:1px black solid; border-left:1px black solid;">Content Type</th><th style="text-align:left; color:#fff; background-color:#15317E; border-top:1px black solid; border-right:1px black solid;  border-left:0">Failed Percentage</th>';
  $i = 0;
  foreach ($finalArray as $index => $value) {
    $report_page2_table .= '<tr><td style="border-right:1px black solid; border-left:1px black solid; border-bottom:1px black solid;">' . $index . '</td><td style="border-right:1px black solid; border-bottom:1px black solid;">' . (100 - $value) . '%</td></tr>';
    $i++;
  }
  $report_page2 .= $report_page2_table;
  $report_page2 .= '</table>';
  $report_page2 .= '<p style="page-break-before: always">&nbsp;</p>';
  
  //Build page 3
  //$failed_nodes = getNodeSEOCheck('pdf');
  $sql = "SELECT * FROM {seo_compliance_data} WHERE nodeid > 0 ORDER BY nodepercentage DESC";
  $result = db_query($sql);
  $sql_count = "SELECT COUNT(*) FROM {seo_compliance_data} WHERE nodeid > 0 ORDER BY nodepercentage DESC";
  $result_count = db_result(db_query($sql_count));

  //db_query("SELECT * FROM {seo_compliance_data} ORDER BY nodepercentage DESC", $nid);
  $report_page3 = '<table border="0" cellpadding="0" cellspacing="0" style="font-size:12px"><tr><th width="160" style="padding-left:3px; color:#fff; background-color:#15317E; border:1px solid #000">Page Title</th><th width="120" style="padding-left:3px; color:#fff; background-color:#15317E; border:1px solid #000">Rule Name</th><th width="200" style="padding-left:3px; color:#fff; background-color:#15317E; border:1px solid #000">Rule Message</th><th style="padding-left:3px; color:#fff; background-color:#15317E; border:1px solid #000">Page Type</th><th style="padding-left:3px; color:#fff; background-color:#15317E; border:1px solid #000" width="20">Failed Percent</th></tr>';
  if ($result_count > 0) {
    while ($row = db_fetch_array($result)) {
      //Fetch the failed rules for the this node
      $rule_count = 0;
      $rule_result = db_query("SELECT * FROM {seo_rules_data} WHERE nodeid = %d ORDER BY nodeid DESC", $row['nodeid']);
      /* iterate the rules array */
      $rules_output = '';
      $rules_output .= '<table border="0" cellpadding="0" cellspacing="0">';
      while ($rule_row = db_fetch_array($rule_result)) {
        $rules_output .= '<tr>';
        $rules_output .= '<td width="120">';
        $rules_output .= $rule_row['seorulename'];
        $rules_output .= '</td>';
        $rules_output .= '<td width="198" style="padding-left:3px; border-left:1px solid #000">';
        $rules_output .= $rule_row['seorulemessage'];
        $rules_output .= '</td>';
        $rules_output .= '</tr>';
      }
      $rules_output .= '</table>';			
      $drupal_alias_path = $base_url . '/' . drupal_get_path_alias('node/' . $row['nodeid'] . '/edit');
      $report_page3 .= '<tr>';
      $report_page3 .= '<td width="160" style="padding-left:3px; border:1px solid #000"><a href="' . $drupal_alias_path . '" style="text-decoration:none" title="Click here to edit">' . $row['nodetitle'] . '</a></td>';
      //$report_page3 .= $rules_output_one;
      $report_page3 .= '<td colspan="2" style="padding-left:3px; border:1px solid #000">' . $rules_output . '</td>';
      $report_page3 .= '<td style="padding-left:3px; border:1px solid #000">' . $row['nodetype'] . '</td>';
      $report_page3 .= '<td style="padding-left:3px; border:1px solid #000" width="20">' . $row['nodepercentage'] . '%' . '</td>';
      $report_page3 .= '</tr>';
    }
  }
  else {
    $report_page3 .= '<tr>';
    $report_page3 .= '<td colspan="5" style="border:1px solid #000">No Results</td>';
    $report_page3 .= '</tr>';
  }
  $report_page3 .= '</table>';	

  //echo $report_page3;exit;
  $output = $report_page1 . $report_page2 . $report_page3;
  //$output = $report_page1.$report_page2;
  generatePDF($output);
  if (isset($_REQUEST['destination'])) {
    drupal_goto($_REQUEST['destination']);
  }
}

/*
Seo Report
- Graph
- Failed List - Report
- Faield Rules

Still need to working
- XML Sitemap
- Google Analytics
- PDF Report generation - 3 Pages report
- When the node is deleted, delete the report also
*/

function generatePDF($html) {
//TODO: Generate the pages as per the requirement

// need to include dompdf library,
    // considering module name is pdf_maker and dompdf library within the module.   
    // check the library files are exist or not.
    if ( !file_exists('sites/all/libraries/dompdf/dompdf_config.inc.php' ) ) {
        drupal_set_message( t('Dompdf did not found!') );
        return;
    }
   //echo $html; exit; 
    // build the html from submitted values of form
  $output = '<html><head><meta http-equiv="Content-Type" content="text/html;charset=utf-8" /></head><body style="font-family:dejavu serif condensed;">' . $html . '</body></html>';
   
    // include library file
    require_once 'sites/all/libraries/dompdf/dompdf_config.inc.php';
   
    // generate an pdf of html output using dompdf.
    $dompdf = new DOMPDF();
    $dompdf->load_html($output);
    $dompdf->render();
   

// to gerenate pdf and sending it as an email attachment.
  
    // create an empty file within drupals file directory
    //$pdfName = 'Booking_'.rand(97,122).'.pdf';
  $pdfName = str_replace(' ', '_', variable_get('site_name', 'SEO')) . '_Report.pdf';
    $pdfPath = file_create_filename( $pdfName, file_directory_path() ); 
   
    $htmlData = $dompdf->output();
   
// write the pdf content within that file.
    file_put_contents($pdfPath, $htmlData);
  drupal_set_message( t('PDF with the report is generated. ' . l('Download PDF', $pdfPath, array('attributes' => array('html' => TRUE, 'target' => '_blank'))), array( '%1' => $pdfPath, '%2' =>  url($pdfPath)) ) );
}

/*
 * Helper function to provide the data required for the table listing and for PDF report.
 * @ getPDFReport
 * @ getFailedNodesList
 */
function getNodeSEOCheck() {
  $count = 0;
  $seoDataArray = array();
  $sql = "SELECT * FROM {seo_compliance_data} WHERE nodeid > 0 ORDER BY nodepercentage DESC";
  $header =  array(
    array('data' => t('Title'), 'field' => 'ntitle'),
    t('Failed Rules'),
    array('data' => t('Type'), 'field' => 'type'),
    array('data' => t('Failed Percentage'), 'field' => 'percentage'),
   t('Wanna make SEO Complaint?') );
   $sql .= tablesort_sql($header);
  $result = pager_query($sql, PAGINATION_MAX, PAGINATION_MIN);
  //db_query("SELECT * FROM {seo_compliance_data} ORDER BY nodepercentage DESC", $nid);
  while ($row = db_fetch_array($result)) {
    $seoDataArray['nodedata'][$count] = array('type' => $row['nodetype'], 'nid' => $row['nodeid'], 'ntitle' => $row['nodetitle'], 'percentage' => $row['nodepercentage']);
    //Fetch the failed rules for the this node
    $rule_count = 0;
    $rule_result = db_query("SELECT * FROM {seo_rules_data} WHERE nodeid = %d ORDER BY nodeid DESC", $row['nodeid']);
    while ($rule_row = db_fetch_array($rule_result)) {
      $seoDataArray['ruledata'][$row['nodeid']][$rule_count] = array('seorulename' => $rule_row['seorulename'], 'seorulemessage' => $rule_row['seorulemessage']);
      $rule_count++;
    }
    $count++;
  }					
  //echo "getNodeSEOCheck = <PRE>";print_r($seoDataArray);exit;
  return $seoDataArray;
}

/*
 * Report Page for displaying Graphs.
 */
function seo_checker_report() {
  $reportData = '';
  $node = '';
  if (module_exists('jquery_ui')) {
  //jQuery.extend(Drupal.settings, { "basePath": "/" });
    drupal_set_html_head('<script type="text/javascript" src="https://www.google.com/jsapi" /></script>');
    jquery_ui_add('ui.slider', 'none');
    drupal_add_js(drupal_get_path('module', 'seo_checker') ."/js/slider.js");
  }
  //get the XMLSitemap check and Google Analytics check at a sitelevel.
  $xmlsitemap = check_xmlsitemap_compliance(array(), 'site');
  $ga_key		= check_GA_compliance(array(), 'site') == 100 ? "Available" : "Not Available" ;
  $ga_verify 	= check_GA_verify_compliance();
  $reportData = '<table>';
  $reportData .= '<tr><th>Type of Check</td><th>Status</td></tr>';
  $reportData .= '<tr><td>XML Sitemap </td><td>' . $xmlsitemap . '</td></tr>';
  $reportData .= '<tr><td>Google Analytics Key</td><td>' . $ga_key . '</td></tr>';
  //$reportData .= '<tr><td colspan="2"> </td></tr>';
  $reportData .= '</table>';
  $reportData .= '<table>
    <tr><th>Site Verification</td><th>Status</td></tr>
    <tr><td>Google Verify</td><td>' . $ga_verify['g_verify'] . '</td></tr>
    <tr><td>Bing Verify</td><td>' . $ga_verify['b_verify'] . '</td></tr>
    <tr><td>Yahoo Verify</td><td>' . $ga_verify['y_verify'] . '</td></tr>
  </table>';
  $reportData .= '<div align="center"><div id="chart_div" style="width: 900px; height: 500px;"></div>View Complete Report <a href="seoreport">click here</a><div id="visualization" style="width: 900px; height: 500px;"></div></div>';
  
  return $reportData;
}

/* 
 * Draw bar chart with content types
 */
function seo_checker_report2() {
  $finalDataArray = getNodeTypesWithPercentage();
  header('content-type: application/json');
  echo json_encode($finalDataArray);	
}

function overallpercent() {
  $seo_compliance_data1 = db_query("SELECT * FROM {seo_compliance_data} WHERE nodeid >0");
  $nodepercentage = "";
  while ($row = db_fetch_array($seo_compliance_data1)) {	
    $nonCompliant[]=$row['nodepercentage'];
  }
  /* print "<pre>";	
  print_r($nonCompliant);
  echo array_sum($nonCompliant)."<br>";
  echo  count($nonCompliant);
  die(); */
  
  // calculate avarage now 
  $count1 = array_sum($nonCompliant) / count($nonCompliant);
  $nonCompliant = number_format($count1, 0);	   
  $percentage = 100 - $nonCompliant;
  $output['nonCompliant'] = $nonCompliant;
  $output['percentage'] = $percentage;
  return $output;
}
/*
 * Helper funciton for Bar graph
 * @ seo_checker_report2
 */
function getNodeTypesWithPercentage() {
  $uniqueArrayCType="";
  $seo_compliance_data = db_query("SELECT * FROM {seo_compliance_data}  WHERE nodeid >0");
  $seo_compliance_data_count = db_result(db_query("SELECT COUNT(*) FROM {seo_compliance_data}  WHERE nodeid >0"));
  if ($seo_compliance_data_count > 0 ) {
  while ($row = db_fetch_array($seo_compliance_data)) {	
    $contentData[] = array('nodeType' => $row['nodetype'], 'nodeComPer' => $row['nodepercentage']);
    //Holds nodetype
    $uniqueArrayCType[]=$row['nodetype'];
    
    $tmp[]=$row['nodepercentage'];
  }
  /* echo array_sum($tmp);
  echo count($tmp);
  die();	 */

  //make content type as unique
  $uniqueCTypes =	array_values(array_unique($uniqueArrayCType));
  $finalDataArray=array();	
  $finalDataArray1[]="";
  $finalDataArray2[]="";
  for ($n=0; $n <= count($uniqueCTypes); $n++) {	
    if ($uniqueCTypes[$n]<>"")	{
    $node_data_with_percentage="";
        foreach ($contentData as $value) {
              if ($uniqueCTypes[$n] == $value['nodeType']) {
                  $node_data_with_percentage[] = $value['nodeComPer'];
                }else{ continue; }
          }			
        $finalDataArray1[]=$uniqueCTypes[$n];
        //print_r($node_data_with_percentage);
        $node_data_with_percentage = array_sum($node_data_with_percentage) / count($node_data_with_percentage);
        $finalDataArray2[] = intval($node_data_with_percentage);									
      }	 
  }
   $finalDataArray = array($finalDataArray1, $finalDataArray2);
   }
   else{
  $finalDataArray = array();
   }
   return $finalDataArray;
}

/* 
 * Draw pie chart
 */
function seo_checker_report1() {
  $nonCompliant = array();
  $percentage = 100;
  $nonCompliant1 = 0;	
  $seo_compliance_data = db_query("SELECT * FROM {seo_compliance_data} WHERE nodeid >0");
  $seo_compliance_data_count = db_result(db_query("SELECT COUNT(*) FROM {seo_compliance_data} WHERE nodeid >0"));
  if ($seo_compliance_data_count > 0) {
    $nodepercentage = "";
    while ($row = db_fetch_array($seo_compliance_data)) {	
      $nonCompliant[]=$row['nodepercentage'];
    }
    /* print "<pre>";	
    print_r($nonCompliant);exit;
    echo array_sum($nonCompliant)."<br>";
    echo  count($nonCompliant);
    die(); */

    // calculate avarage now 
    $count1 = array_sum($nonCompliant) / count($nonCompliant);
    $nonCompliant1 = number_format($count1, 0);	   
    $percentage = 100 - $nonCompliant1;
  }
  $data = array();
  $data [] = array("Name", "Value");
  $data [] = array("Passed Nodes", intval($percentage));
  $data [] = array("Failed Nodes", intval($nonCompliant1));
  header('content-type: application/json');
  echo json_encode($data);

}
/*
 * Helper function for the hook_validate.
 */
function seo_checker_node_form_validate($form, &$form_state) {
  global $user;
  if ( !user_access('skip seo checks', $user) || ($user->uid == 1 && variable_get('seo_checker_admin_skip_checks', 0) == 0) ) {
  if ( check_seo_visibility() ) {
    if (module_exists('nodewords')) {
      //print_r($form_state['values']);exit;
      if ( $form_state['values']['nodewords']['keywords'] == '') {
        form_set_error('nodewords[keywords]', t('Please enter at least one keyword in meta tag keywords.'));
      }
      else{
        if ( $form_state['values']['nodewords']['description'] == '') {
          form_set_error('nodewords[description]', t('The Meta tag description field should containt at least one of the keywords.'));
        }
        else{
          $notfound = TRUE;
          $keywords = explode(',', $form_state['values']['nodewords']['keywords']);
          foreach ($keywords as $keyword) {
            $keyword = trim($keyword);
            $pos = stripos($form_state['values']['nodewords']['description'], $keyword);
            if ( $pos !== FALSE) {
              $notfound = FALSE;
              break;
            }
          }
          if ( $notfound) {
            form_set_error('nodewords[keywords]', t('The Meta tag description field should containt at least one of the keywords.'));
          }
        }
      }
      if ( $form_state['values']['nodewords']['description'] != '') {
        //check the length
        if ( strlen($form_state['values']['nodewords']['description']) > META_DESC_LENGTH) {
          drupal_set_message('Meta description exceeds than the limit of <b>' . META_DESC_LENGTH . ' chars</b>.', 'warning');
        }
      }
      
      if ( $form_state['values']['nodewords']['keywords'] != '') {
        //check the length
        if ( strlen($form_state['values']['nodewords']['keywords']) > META_KW_LENGTH) {
          drupal_set_message('Meta keywords exceeds than the limit of <b>' . META_KW_LENGTH . ' words</b>.', 'warning');
        }
      }			
    }
    seo_checker_perform_checks($node, $form_state['values']);
  }
  }
}

/**
  * function used to convert the node object to node array 
  */
function convertObjtoArray($node) {
  $nodeArray= array($node);
  foreach ($nodeArray[0] as $nodeKey => $nodeValue) {
      $nodeDataArray[$nodeKey] = $nodeValue;
  }
  //print_r($nodeDataArray);exit;
  return $nodeDataArray;
}

/**
 * Implementation of hook_form_alter().
 * Add check results to the form if it has been submitted.
 */
function seo_checker_form_alter(&$form, $form_state, $form_id) {
//print_r($form_state);exit;
//echo "test". $form_state['submitted'];
  if (strpos($form_id, 'node_form') && variable_get('seo_checker_'. $form['type']['#value'], 0) != 0) {
  if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit' && empty($form_state['submitted'])) {
    //echo "in form alter";exit;
    $node = $form['#node'];
    $nodeDataArray = convertObjtoArray($node);
    seo_checker_perform_checks($node, $nodeDataArray, 'no');
  }
  $form['#after_build'][] = 'seo_checker_node_form_after_build'; // for making the meta tags opened i.e. NOT COLLASPED
  $form['#validate'][] = 'seo_checker_node_form_validate';	
  $form['nodewords']['keywords']['#description'] = t('Enter a comma separated list of keywords for this page. Limit your keywords to about 15 words.');
  }
}
/**
*
*NODE_SAVE()
**/
function seo_checker_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
     switch ($op) {
        case 'insert':
        case 'presave':
        case 'update':
        case 'validate':
    $nodeDataArray = convertObjtoArray($node);
        seo_checker_perform_checks($node, $nodeDataArray, 'yes', $op);
        break;
        }
}

/**
 * Implementation of after_build method().
 * for making the meta tags opened i.e. NOT COLLASPED and adjusting the weight.
 */
function seo_checker_node_form_after_build($form, &$form_state) {
  $form['nodewords']['#collapsed'] = FALSE;
  $form['nodewords']['#weight'] = 5;
  return $form;
}

/**
 * Get the threshold of a rule. Pass the rule array and the ID.
 */
function seo_checker_get_rule_threshold($rule, $rid, $admin = 'no') {
  if ( $admin == 'yes') {
    $threshold = !empty($rule['default threshold'])?$rule['default threshold']:array(1000, 100);
  }else {
      $threshold = variable_get('seo_threshold_'. $rid, !empty($rule['default threshold'])?$rule['default threshold']:array(1000, 100));
  }
  if (!is_array($threshold)) {
    $threshold = array($threshold, 100);
  }
  return $threshold;
}

/**
 * seo checker function checks the submitted custom url
 * by applying all the rules and includes the summary to the node form.
 */

function seo_checker_perform_checks_custom_urls($custom_path) {

  $global_rules_path = variable_get('global_rules_path', '');
  
  //include the files
  if ($global_rules_path != '') {
    require_once($global_rules_path);
    //read the file timestamp and set the variable.
  }

  global $user;
  /* overall status */
  $checks_passed = TRUE;

  /* the results will be prepended to the node_preview block */
  $results = array();
  $url = get_site_base_url();
  $currentPageContent = file_get_contents($url . '/' . $custom_path);
  

     
  //check for ALT for image tags
  $check_result = round(imageAltCheck($currentPageContent));
    /* check if the submitted node has passed the test. */
    $passed = $check_result >= 100 && $check_result <= 100 ? 'passed' : 'failed';
  /* collect the data to any array to get overall percentage. */
  $passed_array[] = $check_result >= 100 && $check_result <= 100 ? '1' : '0';
  /* Narendra: Insert the failed rules into array. */
  if ($passed == 'failed' ) {
    $failed_rules[] = array('rule' => t('Alt attributes in &lt;img&gt; - tags'), 'message' => t('Checks if all the &lt;img&gt; tags in the body have an alt attribute.'));
    
  }
  
  //check for TITLE for anchor tags
  $check_result = round(basic_seo_rules_title_attribute(array('body' => $currentPageContent)));
  /* check if the submitted node has passed the test. */
    $passed = $check_result >= 100 && $check_result <= 100 ? 'passed' : 'failed';
  /* collect the data to any array to get overall percentage. */
  $passed_array[] = $check_result >= 100 && $check_result <= 100 ? '1' : '0';
  /* Narendra: Insert the failed rules into array. */
  if ($passed == 'failed' ) {
    $failed_rules[] = array('rule' => t('Title attributes in &lt;a href&gt; - tags'), 'message' => t('Checks if all the &lt;a href&gt; tags have a title attribute.'));
    
  }
  
  
  //check for density in the body
  $check_result = round(keyword_rules_density(array('body' => $custom_path), 'customurl'));
  /* check if the submitted node has passed the test. */
    $passed = $check_result >= 5 && $check_result <= 30 ? 'passed' : 'failed';
  /* collect the data to any array to get overall percentage. */
  $passed_array[] = $check_result >= 5 && $check_result <= 30 ? '1' : '0';
  /* Narendra: Insert the failed rules into array. */
  if ($passed == 'failed' ) {
    $failed_rules[] = array('rule' => t('Keyword density in the body'), 'message' => t('Checks the density of keywords over the the body of a page. Remark: too high density is not a good SEO.'));
    
  }
  
  //check for density in the title
  $check_result = round(keyword_rules_customtitle($currentPageContent, 'title'));
  
  /* check if the submitted node has passed the test. */
    $passed = $check_result >= 50 && $check_result <= 100 ? 'passed' : 'failed';

  /* collect the data to any array to get overall percentage. */
  $passed_array[] = $check_result >= 50 && $check_result <= 100 ? '1' : '0';
  /* Narendra: Insert the failed rules into array. */
  if ($passed == 'failed' ) {
    $failed_rules[] = array('rule' => t('Usage of HTML title'), 'message' => t('Calculates the percentage of the tilte tag' ));
  
  }
 
  //check for page title
  $check_result = round(keyword_rules_page_title(array('body' => $currentPageContent)));
  /* check if the submitted node has passed the test. */
      $passed = $check_result >= 50 && $check_result <= 100 ? 'passed' : 'failed';
  /* collect the data to any array to get overall percentage. */
  $passed_array[] = $check_result >= 50 && $check_result <= 100 ? '1' : '0';
  /* Narendra: Insert the failed rules into array. */
  if ($passed == 'failed' ) {
    $failed_rules[] = array('rule' => t('Usage of HTML page title'), 'message' => t('Calculates the percentage of the heading-tags (e.g. &lt;h1&gt;,&lt;h2&gt;,...) in the node body that contain keywords.'));
    
  }
  
  
  //check for SEO URL
  $check_result = round(check_seo_friendly_url($custom_path, 'yes'));
  /* check if the submitted node has passed the test. */
    $passed = $check_result >= 100 && $check_result <= 100 ? 'passed' : 'failed';
  /* collect the data to any array to get overall percentage. */
  $passed_array[] = $check_result >= 100 && $check_result <= 100 ? '1' : '0';
  /* Narendra: Insert the failed rules into array. */
  if ($passed == 'failed' ) {
    $failed_rules[] = array('rule' => t('Check SEO friendliness of url'), 'message' => t('Check whether the current node/page have a SEO friendly url or not.'));
    
  }
  
  
  //check for google analytics key
  $check_result = round(check_GA_compliance($custom_path, 'customurl'));
  /* check if the submitted node has passed the test. */
    $passed = $check_result >= 100 && $check_result <= 100 ? 'passed' : 'failed';
  /* collect the data to any array to get overall percentage. */
  $passed_array[] = $check_result >= 100 && $check_result <= 100 ? '1' : '0';
  /* Narendra: Insert the failed rules into array. */
  if ($passed == 'failed' ) {
    $failed_rules[] = array('rule' => t('Check the presents of Google analytic script'), 'message' => t('Check whether the current node/page have Google analytic script.'));
    
  }

  //if (  $insert == 'yes') {
  //echo "<PRE>test = ";print_r($failed_rules);  exit; 
    /* insert into the database the failed nodes and rules. */
    $is_existing = FALSE;
    $is_existing_data = FALSE;
    if ( count($failed_rules) > 0) {
    
    
    $form_values = array(
        'title' => $custom_path ,
        'type' => 'customurl' ,
        );
   /*   $nodeid = db_result(db_query("SELECT seoid FROM {seo_compliance_custom_data} ORDER BY seoid ASC LIMIT 1"));
    
  if ( $nodeid == '') {
    $form_values['nid'] = -1;
    }
    else {
    $form_values['nid'] = $nodeid - 1;
    }
    $form_values['nid'] = $nodeid - 1 ."<br>";*/
    //exit;
    //get the overall percentage of the passed array.
    $percentage = getSEOCompliancePercentage($passed_array);
    print_r($passed_array);
    $is_existing_data = db_result(db_query("SELECT COUNT(*) FROM {seo_compliance_custom_data} WHERE nodetitle = '%s'", $form_values['title']));
    //$seoid = '';
    if ($is_existing_data) {
      //$seoid = db_result(db_query("SELECT seoid FROM {seo_compliance_data} WHERE nodeid = %d", $form_values['nid']));
      db_query("UPDATE {seo_compliance_custom_data} SET nodepercentage = %f WHERE nodetitle = '%s'", $percentage, $form_values['title']);
    }
    else{
      db_query("INSERT INTO {seo_compliance_custom_data} (nodetitle, nodetype, nodepercentage) VALUES ('%s', '%s', %f)", $form_values['title'], $form_values['type'], $percentage);
      //$seoid = db_last_insert_id('seo_compliance_data','seoid');
    }
     $seoid=db_last_insert_id('seo_compliance_custom_data', 'seoid');
    /*
     * Delete all the existing rules for this node and reinsert the new failed rules.
     */
    db_query("DELETE FROM {seo_rules_data} WHERE nodeid = %d", $seoid);
    foreach ($failed_rules as $index => $value) {
    //drupal_set_message("in foreach");
      db_query("INSERT INTO {seo_rules_data} (nodeid, seorulename, seorulemessage) VALUES (%d, '%s', '%s')", $seoid, $value['rule'], $value['message']);
    }
    } else {
    //if the failed rules are zero (0), then check for the node existing in the table if yes, then delete the node and its related data from the table.
    $is_existing = db_result(db_query("SELECT COUNT(*) FROM {seo_compliance_custom_data} WHERE nodetitle = '%s'", $form_values['title']));
    if ( $is_existing) {
        
      db_query("DELETE FROM {seo_compliance_custom_data} WHERE nodeid = %d", $seoid);
      db_query("DELETE FROM {seo_rules_data} WHERE nodeid = %d", $seoid);
    }
    }
  //} //end of "insert" if 

  //echo "Narendra";print_r($passed_array);
  return $seoid;
}

/**
 * Implements the alt attribute in <img>-tags check.
 * @return (int) result
 * @param array $form_values
 */
function imageAltCheck($content) {
  if (!preg_match_all('/<img[^>]+>/i', $content, $matches)) {
    return 100;
  }

  /* check content */
  if (!empty($matches)) {
    foreach ($matches[0] as $image_tag) {
      if (preg_match('/alt=(\S{3,})/i', $image_tag)) {
        $successful++;
      }
      $total++;
    }
  }
  return 100*$successful/$total;
}


/**
 * This is the main seo checker function. It checks the submitted node
 * by applying all the rules and includes the summary to the node form.
 */
function seo_checker_perform_checks(&$form, &$form_values, $insert = 'yes', $op = 'prepare') {
//print_r($form_values);exit;
  global $user;
  /* overall status */
  $checks_passed = TRUE;

  /* the results will be prepended to the node_preview block */
  $results = array();

  /* loop over all the rules and apply them to the form_values */
  $rules = include_seo_rules();
  //$rules = module_invoke_all('register_seo_rules');

  foreach ($rules as $rid => $rule) {
    if (!function_exists($rule['callback'])) {
      drupal_set_message(sprintf(t('The function <i>%s()</i> for seo_checker rule <b>%s</b> was not found.'), $rule['callback'], strip_tags(check_markup($rule['name']))), 'error');
      continue;
    }

    /* threshold == 0 implies that this rule is desabled. */
    if (($threshold = seo_checker_get_rule_threshold($rule, $rid)) == array(0, 100)) {
      continue;
    }
    $threshold_text = '';
    if ($threshold[1] == 100) {
      $threshold_text = '&ge;&nbsp;'. $threshold[0] .'%';
    }
    else {
      $threshold_text = '&#8712;&nbsp;['. $threshold[0] .'%,'. $threshold[1] .'%]';
    }
    /* here we apply the rules to the values. It should return an integer result. */
    $arguments = isset($rule['callback arguments']) ? $rule['callback arguments'] : array();
    array_unshift($arguments, $form_values);
    $check_result = call_user_func_array($rule['callback'], $arguments);

    if ($check_result === FALSE) {
      /* skip this rule */
      continue;
    }
    $check_result = round($check_result);

    /* check if the submitted node has passed the test. */
    $passed = $check_result >= $threshold[0] && $check_result <= $threshold[1] ? 'passed' : 'failed';
  /* collect the data to any array to get overall percentage. */
  $passed_array[] = $check_result >= $threshold[0] && $check_result <= $threshold[1] ? '1' : '0';
    
  $data = array(
      'rule' => strip_tags(check_markup($rule['name'])),
      'message' => $rule[$passed .' feedback'],
      'achieved' => $check_result .'%',
      'required' => $threshold_text,
      'passed' => '<img src="'. url(drupal_get_path('module', 'seo_checker') .'/img/'. $passed) .'.gif" alt="'. $passed .'" />',
    );
  
  /* Narendra: Insert the failed rules into array. */
  if ($passed == 'failed' ) {
    $failed_rules[] = array('rule' => $data['rule'], 'message' => $data['message']);
    
  }
    /* append the results to the array and update the overall status variable */
    $results[] = array(
      'data' => $data,
      'class' => 'seo_checker_result_'. $passed,
    );
    $checks_passed &= ($check_result >= $threshold[0] && $check_result <= $threshold[1]);
  }
  //echo $insert;
  //echo "<PRE>test = ";print_r($failed_rules);  exit; 
  
  if (  $insert == 'yes') {
  //echo "<PRE>test = ";print_r($failed_rules);  exit; 
    /* insert into the database the failed nodes and rules. */
    $is_existing = FALSE;
    $is_existing_data = FALSE;
    if ( count($failed_rules) > 0) {
    //get the overall percentage of the passed array.
    $percentage = getSEOCompliancePercentage($passed_array);
    //print_r($passed_array);exit;
    $is_existing_data = db_result(db_query("SELECT COUNT(*) FROM {seo_compliance_data} WHERE nodeid = %d", $form_values['nid']));
    //$seoid = '';
    if ($is_existing_data) {
      //$seoid = db_result(db_query("SELECT seoid FROM {seo_compliance_data} WHERE nodeid = %d", $form_values['nid']));
      db_query("UPDATE {seo_compliance_data} SET nodepercentage = %f WHERE nodeid = %d", $percentage, $form_values['nid']);
    }
    else{
      db_query("INSERT INTO {seo_compliance_data} (nodeid, nodetitle, nodetype, nodepercentage) VALUES (%d, '%s', '%s', %f)", $form_values['nid'], $form_values['title'], $form_values['type'], $percentage);
      //$seoid = db_last_insert_id('seo_compliance_data','seoid');
    }
    /*
     * Delete all the existing rules for this node and reinsert the new failed rules.
     */
    db_query("DELETE FROM {seo_rules_data} WHERE nodeid = %d", $form_values['nid']);
    foreach ($failed_rules as $index => $value) {
    //drupal_set_message("in foreach");
      db_query("INSERT INTO {seo_rules_data} (nodeid, seorulename, seorulemessage) VALUES (%d, '%s', '%s')", $form_values['nid'], $value['rule'], $value['message']);
    }
    } else {
    //if the failed rules are zero (0), then check for the node existing in the table if yes, then delete the node and its related data from the table.
    $is_existing = db_result(db_query("SELECT COUNT(*) FROM {seo_compliance_data} WHERE nodeid = %d", $form_values['nid']));
    if ( $is_existing) {
      db_query("DELETE FROM {seo_compliance_data} WHERE nodeid = %d", $form_values['nid']);
      db_query("DELETE FROM {seo_rules_data} WHERE nodeid = %d", $form_values['nid']);
    }
    }
  } //end of "insert" if 
  
  /* append the check results just before the title field */
  $seo_check_results = array(
    '#type' => 'seo_check_results',
    '#title' => t('SEO Check Results'),
    '#results' => $results,
  );
  $message = drupal_render($seo_check_results);
      
  if (!$checks_passed && (!user_access('allow seo check failures', $user) || ($user->uid == 1 && variable_get('seo_checker_admin_allow_failurs', 0) == 0))) {
   // form_set_error('check_results', t('The SEO compliance check was not successful. Check the table and modify your content as required.'));
  switch ($op) {
        case 'validate':
        case 'insert':
        $output = $message;
        break;
    }
     if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit') {
      switch ($op) {
         case 'update':
         case 'validate':
         $output =$message;
        break;
    }
     $output =	$message;
  }
       //do not need to show the status message on "batch" i.e.; bulk SEO check
     if ( arg(0) != 'batch') {
    drupal_get_messages('status', TRUE);
    drupal_set_message($message, 'status', TRUE);   
     }
  } else {
    /* throw an error if failures are not allowed */
    $check_policy = variable_get('seo_checker_allow_failures', 'show-preview-only');
    switch ($check_policy) {
      case 'show-always':
      if ( $form_values['op']<>"Save") {
       // drupal_set_message(filter_xss($message));
    }	
        break;
      case 'show-preview-only':
        if ($form_values['op'] == 'Preview') {
         // drupal_set_message(filter_xss($message));
        }
    }
  }

}

/**
 * The SEO Checker has to be enabled per content type
 */
function seo_checker_form_node_type_form_alter(&$form, $form_status) {
  $form['workflow']['seo_checker'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable SEO checking'),
    '#default_value' => variable_get('seo_checker_'. $form['#node_type']->type, 0),
    '#description' => t('Check this box to enable SEO checking for this node type.'),
  );
}

/********************************** HELPERS **********************************/

/**
 * Find position of first occurrence of a case-insensitive WORD
 * @return int
 * @param array $haystack
 * @param string $needle
 */
function seo_checker_wordipos($haystack, $needle, $offset=0) {
  $pos = -1;
  $found = FALSE;
  while ($found === FALSE) {
    $pos = stripos($haystack, $needle, $offset);
    if ($pos === FALSE) {
      return FALSE;
    }

    /* check if the characters before and after the found tag are non-word characters */
    $expanded_string = (isset($haystack[$pos-1]) ? $haystack[$pos-1] :' ') . (isset($haystack[$pos+strlen($needle)]) ? $haystack[$pos+strlen($needle)] : ' ');
    if (preg_match_all('/[\W_]/', $expanded_string, $null) == 2) {
      $found = TRUE;
    }
    $offset = $pos+1;
  }
  return $pos;
}


/****************Check SEO report visibility based on user roles*****************/ 
function check_seo_visibility() {
  global $user;
  global $node;
  $status = FALSE;	
  switch ($user->uid) {
    case 0:
    //Validation for anonymous user 
        $status=FALSE;
        break;
    case 1:
    //Validation for Admin user 
        if ( variable_get('PRIV_VIEWSEO_RPT_ADMIN', 1)==1) $status = TRUE;
        break;
  default:
    //Check report visibility by user role(Normal users)
    foreach ($user->roles as $roleKey => $roleValue) {
      if ( variable_get('PRIV_VIEWSEO_RPT_' . $roleKey, 0) == 1 ) $status = TRUE;
    }		
    break;
  }	
  return $status;
}

/****************Check SEO compliance for nodes, This will bring out % of FAILED compliance*****************/ 
function getSEOCompliancePercentage($failed) {
//print_r($failed);exit;
 // calculate percentage now 
  $count1 = (array_sum($failed) / count($failed) ) * 100;
  $percentage = 100 - $count1;
  return number_format($percentage, 4);
}
function seo_checker_top_pages() {
  $sql = "SELECT n.nid as nid, n.title as title,s.totalcount as totalcount FROM {node} n INNER JOIN {node_counter} s ON n.nid = s.nid WHERE s.totalcount <> 0 AND n.status = 1 order by s.totalcount desc";
  $sql_cnt = "SELECT count(s.nid) FROM {node} n INNER JOIN {node_counter} s ON n.nid = s.nid WHERE s.totalcount <> 0 AND n.status = 1 ";
  $result_count = db_result(db_query($sql_cnt));
  $header = array(
   t('Title'),
   t('Total Number of visit'),
   t('Operation') );
  $sql .= tablesort_sql($header);
  $result = pager_query($sql, 10, 3);
  $destination = drupal_get_destination();
  if ( $result_count >0) {
  while ($page = db_fetch_array($result) ) { 
          $row = array();
      $row[] = l($page['title'], 'node/'. $page['nid']);
      $row[] = $page['totalcount'];
      $row[] = l(t('Edit'), 'node/'. $page['nid'] .'/edit', array('query' => $destination));
      $rows[] = $row;
        }
     }
  else {
    $rows[] = array(array('data' => t('No Records.'), 'colspan' => 3));
  }
  $output .= theme('table', $header, $rows);
  //$output .= theme('pager', NULL, 10, 0);
  return $output;
}

//echo check_xmlsitemap_compliance(array(), 'not page');
/*******************************Check for XML sitemap at site-level ********************************/
function check_xmlsitemap_compliance($form_values, $type = 'page') {
  $url = get_site_base_url();
  $xmlSiteMappath = $url . "/sitemap.xml";
  $siteMapContent = file_get_contents($xmlSiteMappath);		
  if ( $siteMapContent) {
    //echo "in if"; exit;
    return "Available";
  }
  else {
    //echo 'in else'; exit;
    return "Not Available"; 
  }
}

/*********************************Check for GA code on node********************************/
function check_GA_compliance($form_values, $type = 'page') {
  if ( $type == 'page') {
  $currentURL =	'node/' . $form_values['nid'];
  }
  elseif ( $type == 'customurl' ) {
  $currentURL =	$form_values;
  }
  else {
  $currentURL =	drupal_get_normal_path(variable_get('site_frontpage', 'node'));
  }
  $url = get_site_base_url();
  $currentPageContent = file_get_contents($url . '/' . $currentURL);
  if ( $currentPageContent != FALSE) {
    $googleAnKey = variable_get('googleanalytics_account', 0);
    if ( strlen(variable_get('googleanalytics_account', 0) ) > 7) {
    $pos = strpos($currentPageContent, $googleAnKey); 
    if ( $pos === FALSE ) {
      return 0;
    } 
    else {
      return 100;
    }
    }
    else {
      return 0; 
    }
  }
}

/*******************************Check for GA site verficaiton the site********************************/
function check_GA_verify_compliance() {
  $currentURL =	drupal_get_normal_path(variable_get('site_frontpage', 'node'));
  $url = get_site_base_url();
  $meta_tags  = get_meta_tags($url . '/' . $currentURL);
  //print_r($meta_tags);exit;
  $g_verify = check_meta_element('google-site-verification', $meta_tags) == FALSE ? 0 : 1;
  $b_verify = check_meta_element('msvalidate_01', $meta_tags) == FALSE ? 0 : 1;
  $y_verify = check_meta_element('y_key', $meta_tags) == FALSE ? 0 : 1;
  $ga_verify['g_verify'] = $g_verify == 0 ? "Not Available" : "Available";
  $ga_verify['b_verify'] = $b_verify == 0 ? "Not Available" : "Available";
  $ga_verify['y_verify'] = $y_verify == 0 ? "Not Available" : "Available";
  return $ga_verify;
}

function check_meta_element($element, $metadata) {
  $metadata = array_change_key_case($metadata,CASE_LOWER);		
  if ( !isset($metadata[$element]) || $metadata[$element] == '') {
    return FALSE;
  }
  return TRUE;
}
